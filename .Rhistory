its_profile
file_list <- list.files(path = folder, pattern = "profiles.absolute.abund_and_meta.txt", include.dirs = TRUE, recursive = TRUE)
its_profile <- read.delim(paste0(folder, "/", file_list), check.names = FALSE, header = F) %>%
janitor::row_to_names(row_number = 7)
its_profile
file_list <- list.files(path = folder, pattern = "profiles.relative.abund_and_meta.txt", include.dirs = TRUE, recursive = TRUE)
its_profile <- read.delim(paste0(folder, "/", file_list), check.names = FALSE, header = F) %>%
janitor::row_to_names(row_number = 7) %>%
dplyr::rename("sample.name" = 2)
its_profile
symportal.import.postmed.abs <- import_profiles_abs(folder_path)
devtools::load_all(".")
symportal.import.postmed.abs <- import_profiles_abs(folder_path)
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
symportal.import.postmed.abs <- import_profiles_abs(folder_path)
symportal.import.profiles.rel <- import_profiles_rel(folder_path)
symportal.import.profiles.rel
input <- import_postmed_abs(folder, type="long")
p <- ggplot() + theme_bw()
input
cols
### get colours
cols <- symportalfunctions::extract_plot_colors(folder_path) |>
as.data.frame() |>
dplyr::rename("col"=1) |>
tibble::rownames_to_column("seq.ID")
### get colours
cols <- extract_plot_colors(folder_path) |>
as.data.frame() |>
dplyr::rename("col"=1) |>
tibble::rownames_to_column("seq.ID")
cols
input <- left_join(input, cols, by="seq.ID")
input
ggplot(data = input,
aes(x = sample.ID, y = abundance,
fill = col, group = abundance))
p <- ggplot(data = input,
aes(x = sample_name, y = abundance,
fill = col, group = abundance))
p
p <- p + geom_bar(color = "black", linewidth = 0.1, show.legend = FALSE, stat = "identity",  position = position_fill(reverse = TRUE)) +
facet_wrap(~facet_column, ncol = 1, scales = "free_x", strip.position="right") +
scale_y_reverse(breaks=seq(0,1,0.2), expand = c(0, 0)) + xlab("") + ylab("") +
theme(panel.spacing = unit(0.4, "lines"), panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
strip.text = element_text(colour = 'white'), strip.background = element_rect(fill="white", color="white"))
p
p <- p + geom_bar(color = "black", linewidth = 0.1, show.legend = FALSE, stat = "identity",  position = position_fill(reverse = TRUE)) +
# facet_wrap(~facet_column, ncol = 1, scales = "free_x", strip.position="right") +
scale_y_reverse(breaks=seq(0,1,0.2), expand = c(0, 0)) + xlab("") + ylab("") +
theme(panel.spacing = unit(0.4, "lines"), panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
strip.text = element_text(colour = 'white'), strip.background = element_rect(fill="white", color="white"))
p
p + geom_bar(color = "black", linewidth = 0.1, show.legend = FALSE, stat = "identity",  position = position_fill(reverse = TRUE))
p <- ggplot(data = input,
aes(x = sample_name, y = abundance,
fill = col, group = abundance))
geom_bar(color = "black", linewidth = 0.1, show.legend = FALSE, stat = "identity",  position = position_fill(reverse = TRUE))
p + geom_bar(color = "black", linewidth = 0.1, show.legend = FALSE, stat = "identity",  position = position_fill(reverse = TRUE))
p <- ggplot(data = input,
aes(x = sample_name, y = abundance,
fill = col, group = abundance))
ggplot(data = input, aes(x = sample_name, y = abundance, fill = col, group = abundance)) +
geom_bar(color = "black", linewidth = 0.1, show.legend = FALSE, stat = "identity") +
#    facet_wrap(~facet_column, ncol = 1, scales = "free_x", strip.position="right") +
scale_y_continuous(expand = c(0, 0)) + xlab("") + ylab("") +
theme(panel.spacing = unit(0.4, "lines"),
strip.text = element_text(colour = 'white'), strip.background = element_rect(fill="white", color="white"))
input <- import_postmed_abs(folder, type="long")
### get colours
cols <- extract_plot_colors(folder_path) |>
as.data.frame() |>
dplyr::rename("col"=1) |>
tibble::rownames_to_column("seq.ID")
input <- left_join(input, cols, by="seq.ID")
### get colours
cols <- extract_plot_colors(folder_path) |>
as.data.frame() |>
dplyr::rename("fill.cols"=1) |>
tibble::rownames_to_column("seq.ID")
input <- left_join(input, cols, by="seq.ID")
ggplot(data = input, aes(x = sample_name, y = abundance, fill = fill.cols, group = abundance))
ggplot(data = input, aes(x = sample_name, y = abundance, fill = fill.cols, group = abundance)) + theme_bw() +
geom_bar(color = "black", linewidth = 0.1, show.legend = FALSE, stat = "identity",  position = position_fill(reverse = TRUE)) +
# facet_wrap(~facet_column, ncol = 1, scales = "free_x", strip.position="right") +
scale_y_reverse(breaks=seq(0,1,0.2), expand = c(0, 0)) + xlab("") + ylab("") +
theme(panel.spacing = unit(0.4, "lines"), panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
strip.text = element_text(colour = 'white'), strip.background = element_rect(fill="white", color="white"))
ggplot(data = input, aes(x = sample_name, y = abundance, fill = col, group = abundance)) +
geom_bar(color = "black", linewidth = 0.1, show.legend = FALSE, stat = "identity") +
#    facet_wrap(~facet_column, ncol = 1, scales = "free_x", strip.position="right") +
scale_y_continuous(expand = c(0, 0)) + xlab("") + ylab("") +
theme(panel.spacing = unit(0.4, "lines"),
strip.text = element_text(colour = 'white'), strip.background = element_rect(fill="white", color="white"))
str(input)
ggplot() + theme_bw() +
geom_bar(data = input, aes(x = sample_name, y = abundance, fill = col, group = abundance),
color = "black", linewidth = 0.1, show.legend = FALSE, stat = "identity") +
#   facet_wrap(~facet_column, ncol = 1, scales = "free_x", strip.position="right") +
scale_y_continuous(expand = c(0, 0)) + xlab("") + ylab("") +
theme(panel.spacing = unit(0.4, "lines"),
strip.text = element_text(colour = 'white'), strip.background = element_rect(fill="white", color="white"))
ggplot() + theme_bw() +
geom_bar(data = input, aes(x = sample_name, y = abundance, fill = col, group = abundance),
color = "black", linewidth = 0.1, show.legend = FALSE, stat = "identity")
ggplot() + theme_bw() +
geom_bar(data = input, aes(x = sample_name, y = abundance, fill = fill.col, group = abundance),
color = "black", linewidth = 0.1, show.legend = FALSE, stat = "identity")
input <- import_postmed_abs(folder, type="long")
### get colours
cols <- extract_plot_colors(folder_path) |>
as.data.frame() |>
dplyr::rename("fill.cols"=1) |>
tibble::rownames_to_column("seq.ID")
input <- left_join(input, cols, by="seq.ID")
input
ggplot() + theme_bw() +
geom_bar(data = input, aes(x = sample_name, y = abundance, fill = fill.cols, group = abundance),
color = "black", linewidth = 0.1, show.legend = FALSE, stat = "identity") +
#   facet_wrap(~facet_column, ncol = 1, scales = "free_x", strip.position="right") +
scale_y_continuous(expand = c(0, 0)) + xlab("") + ylab("") +
theme(panel.spacing = unit(0.4, "lines"), strip.text = element_text(colour = 'white'), strip.background = element_rect(fill="white", color="white"))
ggplot() + theme_bw() +
geom_bar(data = input, aes(x = sample_name, y = abundance, fill = seq.ID, group = abundance),
color = "black", linewidth = 0.1, show.legend = FALSE, stat = "identity") +
#   facet_wrap(~facet_column, ncol = 1, scales = "free_x", strip.position="right") +
scale_y_continuous(expand = c(0, 0)) + xlab("") + ylab("") +
theme(panel.spacing = unit(0.4, "lines"), strip.text = element_text(colour = 'white'), strip.background = element_rect(fill="white", color="white")) +
scale_fill_manual(values = fill.cols)
ggplot() + theme_bw() +
geom_bar(data = input, aes(x = sample_name, y = abundance, fill = fill.cols, group = abundance),
color = "black", linewidth = 0.1, show.legend = FALSE, stat = "identity") +
#   facet_wrap(~facet_column, ncol = 1, scales = "free_x", strip.position="right") +
scale_y_continuous(expand = c(0, 0)) + xlab("") + ylab("") +
theme(panel.spacing = unit(0.4, "lines"), strip.text = element_text(colour = 'white'), strip.background = element_rect(fill="white", color="white")) +
scale_fill_manual(values = fill.cols)
input
ggplot() + theme_bw() +
geom_bar(data = input, aes(x = sample_name, y = abundance, fill = fill.cols, group = abundance),
color = "black", linewidth = 0.1, show.legend = FALSE, stat = "identity") +
scale_y_continuous(expand = c(0, 0)) + xlab("") + ylab("") +
theme(panel.spacing = unit(0.4, "lines"), strip.text = element_text(colour = 'white'), strip.background = element_rect(fill="white", color="white")) +
scale_fill_manual(values = fill.cols)
ggplot() + theme_bw() +
geom_bar(data = input, aes(x = sample_name, y = abundance, fill = fill.cols, group = abundance),
color = "black", linewidth = 0.1, show.legend = FALSE, stat = "identity") +
scale_y_continuous(expand = c(0, 0)) + xlab("") + ylab("") +
theme(panel.spacing = unit(0.4, "lines"), strip.text = element_text(colour = 'white'), strip.background = element_rect(fill="white", color="white"))
fill.cols <- cols$fill.cols
ggplot() + theme_bw() +
geom_bar(data = input, aes(x = sample_name, y = abundance, fill = fill.cols, group = abundance),
color = "black", linewidth = 0.1, show.legend = FALSE, stat = "identity") +
scale_y_continuous(expand = c(0, 0)) + xlab("") + ylab("") +
theme(panel.spacing = unit(0.4, "lines"), strip.text = element_text(colour = 'white'), strip.background = element_rect(fill="white", color="white")) +
scale_fill_manual(values = fill.cols)
plot_postmed_abs <- function(folder){
input <- import_postmed_abs(folder, type="long")
### get colours
cols <- extract_plot_colors(folder_path) |>
as.data.frame() |>
dplyr::rename("fill.cols"=1) |>
tibble::rownames_to_column("seq.ID")
fill.cols <- cols$fill.cols
input <- left_join(input, cols, by="seq.ID")
ggplot() + theme_bw() +
geom_bar(data = input, aes(x = sample_name, y = abundance, fill = fill.cols, group = abundance),
color = "black", linewidth = 0.1, show.legend = FALSE, stat = "identity") +
scale_y_continuous(expand = c(0, 0)) + xlab("") + ylab("") +
theme(panel.spacing = unit(0.4, "lines"), strip.text = element_text(colour = 'white'), strip.background = element_rect(fill="white", color="white")) +
scale_fill_manual(values = fill.cols)
#return(p)
}
plot_postmed_abs(folder)
ggplotly(plot)
plotly::ggplotly(plot)
plot <- ggplot2::ggplot() + ggplot2::theme_bw() +
ggplot2::xlab("") +
ggplot2::geom_bar(data = df2,
ggplot2::aes(x = sample.ID, y = abundance, fill = col,  group = abundance),
color = "black", linewidth = 0.1,
show.legend = FALSE, position="stack", stat="identity") +
ggplot2::scale_fill_identity() +
ggplot2::theme(axis.text.x = ggplot2::element_text(angle = 90, vjust = 0.5, hjust=1))
plot <- ggplot() + theme_bw() +
geom_bar(data = input, aes(x = sample_name, y = abundance, fill = fill.cols, group = abundance),
color = "black", linewidth = 0.1, show.legend = FALSE, stat = "identity") +
scale_y_continuous(expand = c(0, 0)) + xlab("") + ylab("") +
theme(panel.spacing = unit(0.4, "lines"), strip.text = element_text(colour = 'white'), strip.background = element_rect(fill="white", color="white")) +
scale_fill_manual(values = fill.cols)
plotly::ggplotly(plot)
cols
head(cols)
plot <- ggplot() + theme_bw() +
geom_bar(data = input, aes(x = sample_name, y = abundance, fill = seq.ID, group = abundance),
color = "black", linewidth = 0.1, show.legend = FALSE, stat = "identity") +
scale_y_continuous(expand = c(0, 0)) + xlab("") + ylab("") +
theme(panel.spacing = unit(0.4, "lines"), strip.text = element_text(colour = 'white'), strip.background = element_rect(fill="white", color="white")) +
scale_fill_manual(values = fill.cols)
plotly::ggplotly(plot)
input <- import_postmed_rel(folder, type="long")
input
input <- import_postmed_rel(folder, type="long")
input <- import_postmed_abs(folder, type="long")
input
input <- import_postmed_abs(folder, type="long") |>
group_by(sample_name) |>
mutate(total_abundance = sum(abundance)) |>
mutate(relative_abundance = abundance / total_abundance ) |>
ungroup()
input
input <- import_postmed_abs(folder, type="long") |>
group_by(sample_name) |>
mutate(total_abundance = sum(abundance)) |>
mutate(relative_abundance = abundance / total_abundance ) |>
ungroup()
### get colours
cols <- extract_plot_colors(folder_path) |>
as.data.frame() |>
dplyr::rename("fill.cols"=1) |>
tibble::rownames_to_column("seq.ID")
fill.cols <- cols$fill.cols
input <- left_join(input, cols, by="seq.ID")
plot <- ggplot() + theme_bw() +
geom_bar(data = input, aes(x = sample_name, y = relative_abundance, fill = seq.ID, group = abundance),
color = "black", linewidth = 0.1, show.legend = FALSE, stat = "identity") +
scale_y_continuous(expand = c(0, 0)) + xlab("") + ylab("") +
theme(panel.spacing = unit(0.4, "lines"), strip.text = element_text(colour = 'white'), strip.background = element_rect(fill="white", color="white")) +
scale_fill_manual(values = fill.cols)
plotly::ggplotly(plot)
devtools::load_all(".")
symportal.import.postmed.abs
symportal.import.postmed.abs <- import_postmed_abs(folder_path, type="long")
symportal.import.postmed.abs
symportal.import.postmed.abs <- import_postmed_abs(folder_path, type="long")
input=symportal.import.postmed.abs
input
devtools::load_all(".")
remove_samples_by_seq_abund(1000)
remove_samples_by_seq_abund(1000)
symportal.import.postmed.abs
file <- remove_samples_by_seq_abund(symportal.import.postmed.abs, 1000)
devtools::load_all(".")
devtools::load_all(".")
remove_samples_by_seq_abund(symportal.import.postmed.abs, 1000)
#' Function to plot sequences from symportal output
#'
#'
#'
#'
#' @param folder location of the root Symportal output
#' @param type returns either "relative" or "absolute"
remove_samples_by_seq_abund <- function(input, value, ...){
input |> filter(abundance > value)
}
devtools::load_all(".")
remove_samples_by_seq_abund(symportal.import.postmed.abs, 1000)
symportal.import.postmed.abs <- import_postmed_abs(folder_path, type="long")
file <- remove_samples_by_seq_abund(symportal.import.postmed.abs, 1000)
input
input %>%
dplyr::filter(dplyr::case_when(
drop_samples_str == "NA_character_" ~ TRUE, # drop rows by sample name
TRUE ~ !stringi::stri_detect_regex(sample_name, drop_samples_str, opts_regex = stringi::stri_opts_regex(case_insensitive = FALSE))
))
drop_samples_str <- ifelse(length(names) == 0, "NA_character_", paste(names, collapse = "|"))
names <- "AU18_0457"
input %>%
dplyr::filter(dplyr::case_when(
drop_samples_str == "NA_character_" ~ TRUE, # drop rows by sample name
TRUE ~ !stringi::stri_detect_regex(sample_name, drop_samples_str, opts_regex = stringi::stri_opts_regex(case_insensitive = FALSE))
))
drop_samples_str <- ifelse(length(names) == 0, "NA_character_", paste(names, collapse = "|"))
drop_samples_str
input %>%
dplyr::filter(dplyr::case_when(
drop_samples_str == "NA_character_" ~ TRUE, # drop rows by sample name
TRUE ~ !stringi::stri_detect_regex(sample_name, drop_samples_str, opts_regex = stringi::stri_opts_regex(case_insensitive = FALSE))
))
names <- "AU18_0457, AU18_0359"
symportal.import.postmed.abs <- import_postmed_abs(folder_path, type="long")
remove_samples_by_name(symportal.import.postmed.abs, names)
devtools::load_all(".")
remove_samples_by_name(symportal.import.postmed.abs, names)
devtools::load_all(".")
remove_samples_by_name(symportal.import.postmed.abs, names)
drop_samples_str <- ifelse(length(names) == 0, "NA_character_", paste(names, collapse = "|"))
input %>%
dplyr::filter(dplyr::case_when(
drop_samples_str == "NA_character_" ~ TRUE, # drop rows by sample name
TRUE ~ !stringi::stri_detect_regex(sample_name, drop_samples_str, opts_regex = stringi::stri_opts_regex(case_insensitive = FALSE))
))
drop_samples_str
drop_samples_str <- ifelse(length(names) == 0, "NA_character_", paste(names, collapse = "|"))
input %>%
dplyr::filter(dplyr::case_when(
drop_samples_str == "NA_character_" ~ TRUE, # drop rows by sample name
TRUE ~ !stringi::stri_detect_regex(sample_name, drop_samples_str, opts_regex = stringi::stri_opts_regex(case_insensitive = FALSE))
))
drop_samples_str
input %>% filter(sample_names %in% names)
input %>% filter(sample_name %in% names)
names <- c"AU18_0457, AU18_0359"
input %>% filter(sample_name %in% names)
names <- c("AU18_0457, AU18_0359")
input %>% filter(sample_name %in% names)
names
names <- c("AU18_0457", "AU18_0359")
input %>% filter(sample_name %in% names)
input
input %>% !filter(sample_name %in% names)
input %>% filter(!sample_name %in% names)
source("~/symportalfunctions/R/remove_samples_by_name.R", echo=TRUE)
symportal.import.postmed.abs <- import_postmed_abs(folder_path, type="long")
file <- remove_samples_by_name(symportal.import.postmed.abs, names)
file
drop_these_sample_names <- "AU18_0457, AU18_0359"
drop_these_sample_names <- "AU18_0457, AU18_0359"
file <- remove_samples_by_name(input=symportal.import.postmed.abs, names=drop_these_sample_names)
file
?remove_samples_by_name
remove_samples_by_name
excluded.qc.samples <- "AU18_0457, AU18_0359"
file <- remove_samples_by_name(input=symportal.import.postmed.abs, drop = excluded.qc.samples,  remove_zero=excluded.qc.samples)
excluded.qc.samples <- "AU18_0457, AU18_0359"
file <- remove_samples_by_name(input=symportal.import.postmed.abs, drop = excluded.qc.samples,  remove_zero=excluded.qc.samples)
file <- remove_samples_by_name(input=symportal.import.postmed.abs, drop = excluded.qc.samples,  remove_zero=TRUE)
devtools::load_all(".")
file <- remove_samples_by_name(input=symportal.import.postmed.abs, drop = excluded.qc.samples,  remove_zero=TRUE)
devtools::load_all(".")
remove_samples_by_name(input=symportal.import.postmed.abs, drop = excluded.qc.samples,  remove_zero=TRUE)
devtools::load_all(".")
head(symportal.import.postmed.abs)
excluded.qc.samples
excluded.qc.samples <- c("AU18_0457", "AU18_0359")
file <- remove_samples_by_name(input=symportal.import.postmed.abs, drop = excluded.qc.samples,  remove_zero=TRUE)
devtools::load_all(".")
rm(remove_samples_by_name)
devtools::load_all(".")
remove_samples_by_name
file <- remove_samples_by_name(input=symportal.import.postmed.abs, drop = excluded.qc.samples,  remove_zero=TRUE)
devtools::load_all(".")
file <- remove_samples_by_name(input=symportal.import.postmed.abs, drop = excluded.qc.samples,  remove_zero=TRUE)
file
devtools::load_all(".")
devtools::load_all(".")
input
genus="C"
input |>
dplyr::select(sample_name, dplyr::matches(clade, ignore.case = FALSE)) %>% # keep only columns matching "clade"
input |>
dplyr::select(sample_name, dplyr::matches(clade, ignore.case = FALSE))
input |>
dplyr::select(sample_name, dplyr::matches(genus, ignore.case = FALSE))
input
input |>
dplyr::filter(seq.ID %in% dplyr::matches(genus, ignore.case = FALSE))  # keep only columns matching "clade"
devtools::load_all(".")
symportal.qc.postmed.abs.A <- calculate_qc_postmed_bygenus(symportal.import.postmed.abs, "A")
symportal.qc.postmed.abs.D <- calculate_qc_postmed_bygenus(symportal.import.postmed.abs, "D")
symportal.qc.postmed.abs.C <- calculate_qc_postmed_bygenus(symportal.import.postmed.abs, "C")
symportal.qc.postmed.abs.C
symportal.qc.postmed.abs.D
symportal.qc.postmed.abs.A
input
symportal.qc.postmed.rel.all <- calculate_postQC_postmed_rel(symportal.qc.postmed.abs)
devtools::load_all(".")
symportal.qc.postmed.rel.all <- calculate_postQC_postmed_rel(symportal.qc.postmed.abs)
symportal.qc.postmed.rel.A <- calculate_postQC_postmed_rel(symportal.qc.postmed.abs.A)
symportal.qc.postmed.rel.D <- calculate_postQC_postmed_rel(symportal.qc.postmed.abs.D)
symportal.qc.postmed.rel.all <- calculate_postQC_postmed_rel(symportal.import.postmed.abs)
symportal.qc.postmed.rel.A <- calculate_postQC_postmed_rel(symportal.qc.postmed.abs.A)
symportal.qc.postmed.rel.D <- calculate_postQC_postmed_rel(symportal.qc.postmed.abs.D)
symportal.qc.postmed.rel.C <- calculate_postQC_postmed_rel(symportal.qc.postmed.abs.C)
symportal.import.fasta
import_fasta_all
symportal.import.fasta <- import_fasta_all(folder_path) |> as.data.frame(fasta_data) %>%
rownames_to_column("seq_name") %>%
as_tibble()
# extract seqs from the DNAbin format to a single dataframe  (262 columns wide, 1582 rows)
postmed.seqs.chr <- as.character(sym_fasta) %>% as.matrix()
file_list <- list.files(path = paste0(folder,"/post_med_seqs/"), pattern = "seqs.fasta", include.dirs = TRUE, recursive = TRUE)
sym_fasta <- ape::read.dna(paste0(folder, "/post_med_seqs/", file_list), format = "fasta")
# extract seqs from the DNAbin format to a single dataframe  (262 columns wide, 1582 rows)
postmed.seqs.chr <- as.character(sym_fasta) %>% as.matrix()
postmed.seqs.chr
file_list <- list.files(path = folder, pattern = "profiles.relative.abund_and_meta.txt", include.dirs = TRUE, recursive = TRUE)
its_profile_UID <- read.delim(paste0(folder, "/", file_list), check.names = FALSE, header = F) %>%
janitor::row_to_names(row_number = 1) %>%
dplyr::rename("sample.ID" = 2) %>%
dplyr::select(-1) %>%
dplyr::filter(!sample.ID == "") %>%
tidyr::pivot_longer(-sample.ID) %>%
dplyr::filter(value > 0) %>%
dplyr::arrange(sample.ID) %>%
dplyr::filter(!sample.ID == "") %>%
dplyr::select(-value) %>%
tidyr::pivot_wider(id_cols = "sample.ID", names_from = "name", values_from = "name", values_fn = list(am = length)) %>%
tidyr::unite("strings", 2:ncol(.), na.rm = TRUE, sep = "=") %>%
tidyr::separate(strings, paste0("ITS2.profile.UID.", 1:5), sep = "=") %>%
as.data.frame() %>%
dplyr::rename(sample.ID = sample.ID)
# second get the ITS2 type profile UID
file_list <- list.files(path = folder, pattern = "profiles.relative.abund_and_meta.txt", include.dirs = TRUE, recursive = TRUE)
profiles.import <- read.delim(paste0(folder, "/", file_list), check.names = FALSE, header = F) %>%
janitor::row_to_names(row_number = 1) %>%
dplyr::rename("sample.ID" = 2) %>%
dplyr::select(-1) %>%
dplyr::filter(!sample.ID == "") %>%
tidyr::pivot_longer(-sample.ID) %>%
dplyr::filter(value > 0) %>%
dplyr::arrange(sample.ID) %>%
dplyr::filter(!sample.ID == "") %>%
dplyr::select(-value) %>%
tidyr::pivot_wider(id_cols = "sample.ID", names_from = "name", values_from = "name", values_fn = list(am = length)) %>%
tidyr::unite("strings", 2:ncol(.), na.rm = TRUE, sep = "=") %>%
tidyr::separate(strings, paste0("ITS2.profile.UID.", 1:5), sep = "=") %>%
as.data.frame() %>%
dplyr::rename(sample.ID = sample.ID)
# second get the ITS2 type profile UID
file_list2 <- list.files(path = paste0(folder,"/post_med_seqs/"), pattern = "seqs.absolute.abund_and_meta.txt", include.dirs = TRUE, recursive = TRUE)
file_list2
paste0(folder, "/post_med_seqs/", file_list2)
profiles.import <- read.delim(paste0(folder, "/post_med_seqs/", file_list2), check.names=FALSE, header=T) %>% select(-sample_uid) %>% select(!(2:36)) %>% column_to_rownames(var="sample_name")
profiles.import
all.sequences<- list()
for (i in 1:nrow(profiles.import)){ # loop across all rows/samples
# use slice to select each of the 381 samples for the second loop, and remove seqs/columns that sum to zero. e.g.:
# i=1
# C40  C3  C115  C  40b     4138_C
# 411 6999 322  120  836     40
sequence.list <- profiles.import %>% dplyr::slice(i) %>% select_if(colSums(.) != 0)
########### loop among samples
sample.sequences <- list()
# for every sample in the sequence.list
for (k in 1:ncol(sequence.list)){ # loop across columns/seqs
# extract sequence from postmed for that seq (second loop where K is the seq ID)
temp <- subset(postmed.seqs.chr, rownames(postmed.seqs.chr) == names(sequence.list)[k]) %>% as.data.frame() %>%
# repeat n times according to seq count
dplyr::slice(rep(1:n(), each = as.numeric(sequence.list[k])))
sample.sequences[[k]] <- temp
}
# extract seqs from the DNAbin format to a single dataframe  (262 columns wide, 1582 rows)
postmed.seqs.chr <- as.character(sym_fasta) %>% as.matrix()
postmed.seqs.chr
fasta2DNAbin
?fasta2DNAbin
library(adegenet )
install.packages("adegenet")
library(adegenet)
postmed.seqs <- adegenet::fasta2DNAbin(paste0(folder, "/pre_med_seqs/pre_med_master_seqs.fasta"), quiet=FALSE, chunkSize=10, snpOnly=FALSE)
sym_fasta <- adegenet::fasta2DNAbin(paste0(folder, "/pre_med_seqs/pre_med_master_seqs.fasta"), quiet=FALSE, chunkSize=10, snpOnly=FALSE)
sym_fasta <- ape::read.dna(paste0(folder, "/pre_med_seqs/pre_med_master_seqs.fasta"), format = "fasta")
sym_fasta
str(sym_fasta)
listvec2df(sym_fasta)
listvec2df <- function(l){
n.obs <- sapply(l, length)
seq.max <- seq_len(max(n.obs))
mydf <- data.frame(sapply(l, "[", i = seq.max), stringsAsFactors = FALSE)
}
listvec2df(sym_fasta)
listvec2df <- function(l){
n.obs <- sapply(l, length)
seq.max <- seq_len(max(n.obs))
mydf <- data.frame(sapply(l, "[", i = seq.max), stringsAsFactors = FALSE)
return(mydf)
}
tmp <- listvec2df(sym_fasta)
tmp
head(tmp)
devtools::load_all(".")
document()
check()
document()
rm(list = c("plot_postmed_abs", "remove_samples_by_seq_abund"))
document()
check()
check()
library(tictoc)
library(tidyverse)
library(ggplot2)
df <- data.frame(
tile = c('16E', '16E', '16E', '16E', '16E', '16E', '16E', '16D', '16D', '16D', '16D', '16D', '16D', '16D', '16C', '16C', '16C', '16C', '16C', '16C', '16C', '16B', '16B', '16B', '16B', '16B', '16B', '16A', '16A', '16A', '16A', '16A', '16A'),
minutes = c(620, 360, 300, 255, 180, 120, 60, 620, 360, 300, 255, 180, 120, 60, 620, 360, 300, 255, 180, 120, 60, 620, 300, 255, 180, 120, 60, 620, 300, 255, 180, 120, 60),
count = c(22, 20, 16, 15, 12, 6, 4, 25, 23, 23, 22, 19, 16, 7, 28, 23, 21, 21, 17, 14, 6, 21, 12, 12, 9, 6, 2, 8, 7, 6, 6, 4, 2),
density = c(0.88, 0.80, 0.64, 0.60, 0.48, 0.24, 0.16, 1.00, 0.92, 0.92, 0.88, 0.76, 0.64, 0.28, 1.12, 0.92, 0.84, 0.84, 0.68, 0.56, 0.24, 0.84, 0.48, 0.48, 0.36, 0.24, 0.08, 0.32, 0.28, 0.24, 0.24, 0.16, 0.08)
) %>%
mutate(tile=as.factor(tile)) %>%
mutate(density=count/25) # divide the cumulative count by area of tile (5x5cm2).
library(brms)
library(tidybayes)
library(modelr)
library(tidyverse)
# convert cumulative sum of settled larvae to count data per individual (0 for not settled, 1 for settled) at each time point
df_long <- rbind(
df %>% select(-density) %>%
uncount(count, .remove = FALSE) %>%
mutate(settled = 1) %>% select(-count),
df %>% select(-density) %>%
uncount(100 - count, .remove = FALSE) %>%
mutate(settled = 0) %>% select(-count)
)
tic()
event_model_exp <- brm(minutes | cens(1 - settled) ~ (1 | w | tile),
family =  exponential(link = "log"), init = 0,
control = list(adapt_delta = 0.99, max_treedepth = 20),
cores=8, chains=4, iter = 4000, data = df_long)
toc()
saveRDS(event_model_exp, "event_model_exp.Rds")
getwd()
