# Assign new levels
start_idx <- 1
for (i in 1:n_new_levels) {
end_idx <- start_idx + group_size - 1
if (leftover > 0) {
end_idx <- end_idx + 1
leftover <- leftover - 1
}
new_levels[start_idx:end_idx] <- letters[i]
start_idx <- end_idx + 1
}
# Replace old levels with new ones
df$x <- fct_relevel(df$x, levels(df$x)[order(levels(df$x))])
levels(df$x) <- new_levels
print(df)
print(df, nrow=30)
print(df, n=30)
library(tidyverse)
# Create a data frame with a factor column
df <- tibble(
x = factor(rep(letters[1:16], each = 2))
)
# Calculate size and leftover for new levels
n_levels <- nlevels(df$x)
n_new_levels <- 2
group_size <- n_levels %/% n_new_levels
leftover <- n_levels %% n_new_levels
# Create a vector to store the new levels
new_levels <- rep(NA, n_levels)
# Assign new levels
start_idx <- 1
for (i in 1:n_new_levels) {
end_idx <- start_idx + group_size - 1
if (leftover > 0) {
end_idx <- end_idx + 1
leftover <- leftover - 1
}
new_levels[start_idx:end_idx] <- letters[i]
start_idx <- end_idx + 1
}
# Replace old levels with new ones
df$x <- fct_relevel(df$x, levels(df$x)[order(levels(df$x))])
levels(df$x) <- new_levels
print(df, n=30)
library(tidyverse)
# Create a data frame with a factor column
df <- tibble(
x = factor(rep(letters[1:16], each = 2))
)
# Calculate size and leftover for new levels
n_levels <- nlevels(df$x)
n_new_levels <- 4
group_size <- n_levels %/% n_new_levels
leftover <- n_levels %% n_new_levels
# Create a vector to store the new levels
new_levels <- rep(NA, n_levels)
# Assign new levels
start_idx <- 1
for (i in 1:n_new_levels) {
end_idx <- start_idx + group_size - 1
if (leftover > 0) {
end_idx <- end_idx + 1
leftover <- leftover - 1
}
new_levels[start_idx:end_idx] <- letters[i]
start_idx <- end_idx + 1
}
# Replace old levels with new ones
df$x <- fct_relevel(df$x, levels(df$x)[order(levels(df$x))])
levels(df$x) <- new_levels
print(df, n=30)
devtools::load_all(".")
seqs_viewer()
alphanum <- c(0:9, letters, LETTERS)
random_str <- paste0(sample(alphanum, 4, replace = TRUE), collapse = "")
print(random_str)
c(paste0(sample(alphanum, 4, replace = TRUE), collapse = ""),
paste0(sample(alphanum, 5, replace = TRUE), collapse = "")
paste0(sample(alphanum, 6, replace = TRUE), collapse = "")
c(paste0(sample(alphanum, 4, replace = TRUE), collapse = ""),
paste0(sample(alphanum, 5, replace = TRUE), collapse = ""),
paste0(sample(alphanum, 6, replace = TRUE), collapse = ""),
paste0(sample(alphanum, 7, replace = TRUE), collapse = ""),
paste0(sample(alphanum, 5, replace = TRUE), collapse = ""))
c(rep(paste0(sample(alphanum, 4, replace = TRUE), collapse = ""),4),
rep(paste0(sample(alphanum, 5, replace = TRUE), collapse = ""),5),
rep(paste0(sample(alphanum, 6, replace = TRUE), collapse = ""),6),
rep(paste0(sample(alphanum, 7, replace = TRUE), collapse = ""),7),
rep(paste0(sample(alphanum, 5, replace = TRUE), collapse = ""),5))
alphanum <- c(0:9, letters, LETTERS)
data.frame(
species.ID =
c(rep(paste0(sample(alphanum, 4, replace = TRUE), collapse = ""),4),
rep(paste0(sample(alphanum, 5, replace = TRUE), collapse = ""),5),
rep(paste0(sample(alphanum, 6, replace = TRUE), collapse = ""),6),
rep(paste0(sample(alphanum, 7, replace = TRUE), collapse = ""),7),
rep(paste0(sample(alphanum, 5, replace = TRUE), collapse = ""),5))
seq.ID =
c(rep(paste0(sample(alphanum, 2, replace = TRUE), collapse = ""),28))
alphanum <- c(0:9, letters, LETTERS)
data.frame(
species.ID =
c(rep(paste0(sample(alphanum, 4, replace = TRUE), collapse = ""),4),
rep(paste0(sample(alphanum, 5, replace = TRUE), collapse = ""),5),
rep(paste0(sample(alphanum, 6, replace = TRUE), collapse = ""),6),
rep(paste0(sample(alphanum, 7, replace = TRUE), collapse = ""),7),
rep(paste0(sample(alphanum, 5, replace = TRUE), collapse = ""),5))
seq.ID = c(rep(paste0(sample(alphanum, 2, replace = TRUE), collapse = ""),28)),
seq.ID = c(rep(paste0(sample(alphanum, 2, replace = TRUE), collapse = ""),28))
alphanum <- c(0:9, letters, LETTERS)
data.frame(
species.ID =
c(rep(paste0(sample(alphanum, 4, replace = TRUE), collapse = ""),4),
rep(paste0(sample(alphanum, 5, replace = TRUE), collapse = ""),5),
rep(paste0(sample(alphanum, 6, replace = TRUE), collapse = ""),6),
rep(paste0(sample(alphanum, 7, replace = TRUE), collapse = ""),7),
rep(paste0(sample(alphanum, 5, replace = TRUE), collapse = ""),5)),
seq.ID = c(rep(paste0(sample(alphanum, 2, replace = TRUE), collapse = ""),28)),
abundance = runif(28, 0, 1)
)
alphanum <- c(0:9, letters, LETTERS)
data.frame(
species.ID =
c(rep(paste0(sample(alphanum, 4, replace = TRUE), collapse = ""),4),
rep(paste0(sample(alphanum, 5, replace = TRUE), collapse = ""),5),
rep(paste0(sample(alphanum, 6, replace = TRUE), collapse = ""),6),
rep(paste0(sample(alphanum, 7, replace = TRUE), collapse = ""),7),
rep(paste0(sample(alphanum, 5, replace = TRUE), collapse = ""),5)),
seq.ID = c(rep(paste0(sample(alphanum, 2, replace = TRUE), collapse = ""),27)),
abundance = runif(27, 0, 1)
)
tmp= data.frame(
species.ID =
c(rep(paste0(sample(alphanum, 4, replace = TRUE), collapse = ""),4),
rep(paste0(sample(alphanum, 5, replace = TRUE), collapse = ""),5),
rep(paste0(sample(alphanum, 6, replace = TRUE), collapse = ""),6),
rep(paste0(sample(alphanum, 7, replace = TRUE), collapse = ""),7),
rep(paste0(sample(alphanum, 5, replace = TRUE), collapse = ""),5)),
seq.ID = c(rep(paste0(sample(alphanum, 2, replace = TRUE), collapse = ""),27)),
abundance = runif(27, 0, 1)
)
tmp |>
group_by(species.ID) %>%
mutate(facet_column = floor(as.numeric(row_number() - 1) / n) + 1)
n=2
tmp |>
group_by(species.ID) %>%
mutate(facet_column = floor(as.numeric(row_number() - 1) / n) + 1)
create_facet_column <- function(df, n) {
df %>%
group_by(species.ID) %>%
summarise() %>%
mutate(rn = row_number()) %>%
mutate(facet_column = letters[ceiling(rn / (nrow(.) / n))]) %>%
right_join(df, by = "species.ID")
}
create_facet_column(tmp, 3)
tmp2 <- create_facet_column(tmp, 3)
print(tmp2, n=28)
tmp2 <- create_facet_column(data, 2)
print(tmp2, n=28)
tmp2 <- create_facet_column(tmp, 3)
print(tmp2, n=28)
tmp2 <- create_facet_column(data, 2)
tmp2 <- create_facet_column(tmp, 3)
print(tmp2, n=28)
tmp2 <- create_facet_column(tmp, 2)
print(tmp2, n=28)
devtools::load_all(".")
seqs_viewer()
devtools::load_all(".")
seqs_viewer()
devtools::load_all(".")
seqs_viewer()
tmp %>%
group_by(species.ID) %>%
summarise() %>%
mutate(rn = row_number()) %>%
mutate(facet_column = letters[ceiling(rn / (nrow(.) / n))])
tmp %>%
group_by(species.ID) %>%
summarise() %>%
mutate(rn = row_number()) %>%
mutate(facet_column = letters[ceiling(rn / (nrow(.) / n))])
tmp %>%
group_by(species.ID) %>%
summarise() %>%
mutate(rn = row_number()) %>%
mutate(facet_column = letters[ceiling(rn / (nrow(.) / n))]) %>%
right_join(df, by = "species.ID")
tmp= data.frame(
sample.ID =
c(rep(paste0(sample(alphanum, 4, replace = TRUE), collapse = ""),4),
rep(paste0(sample(alphanum, 5, replace = TRUE), collapse = ""),5),
rep(paste0(sample(alphanum, 6, replace = TRUE), collapse = ""),6),
rep(paste0(sample(alphanum, 7, replace = TRUE), collapse = ""),7),
rep(paste0(sample(alphanum, 5, replace = TRUE), collapse = ""),5)),
seq.ID = c(rep(paste0(sample(alphanum, 2, replace = TRUE), collapse = ""),27)),
abundance = runif(27, 0, 1)
)
tmp %>%
group_by(species.ID) %>%
summarise() %>%
mutate(rn = row_number()) %>%
mutate(facet_column = letters[ceiling(rn / (nrow(.) / n))]) %>%
right_join(df, by = "species.ID")
tmp %>%
group_by(sample.ID) %>%
summarise() %>%
mutate(rn = row_number()) %>%
mutate(facet_column = letters[ceiling(rn / (nrow(.) / n))]) %>%
right_join(df, by = "sample.ID")
tmp %>%
group_by(sample.ID) %>%
summarise() %>%
mutate(rn = row_number()) %>%
mutate(facet_column = letters[ceiling(rn / (nrow(.) / n))])
tmp %>%
group_by(sample.ID) %>%
summarise() %>%
mutate(rn = row_number()) %>%
mutate(facet_column = letters[ceiling(rn / (nrow(.) / n))])
n=3
tmp %>%
group_by(sample.ID) %>%
summarise() %>%
mutate(rn = row_number()) %>%
mutate(facet_column = letters[ceiling(rn / (nrow(.) / n))])
tmp %>%
group_by(sample.ID) %>%
summarise() %>%
mutate(rn = row_number()) %>%
mutate(facet_column = letters[ceiling(rn / (nrow(.) / n))]) %>%
right_join(tmp, by = "sample.ID")
create_facet_column <- function(df, n) {
df %>%
group_by(sample.ID) %>%
summarise() %>%
mutate(rn = row_number()) %>%
mutate(facet_column = letters[ceiling(rn / (nrow(.) / n))]) %>%
right_join(df, by = "sample.ID")
}
tmp2 <- create_facet_column(tmp, 3)
print(tmp2, n=28)
tmp2 <- create_facet_column(tmp, 3)
print(tmp2, n=28)
tmp2 <- create_facet_column(tmp, 2)
print(tmp2, n=28)
devtools::load_all(".")
devtools::load_all(".")
seqs_viewer()
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
seqs_viewer()
devtools::load_all(".")
devtools::load_all(".")
seqs_viewer()
devtools::load_all(".")
seqs_viewer()
traceback
traceback()
alphanum <- c(0:9, letters, LETTERS)
tmp= data.frame(
sample.ID =
c(rep(paste0(sample(alphanum, 4, replace = TRUE), collapse = ""),4),
rep(paste0(sample(alphanum, 5, replace = TRUE), collapse = ""),5),
rep(paste0(sample(alphanum, 6, replace = TRUE), collapse = ""),6),
rep(paste0(sample(alphanum, 7, replace = TRUE), collapse = ""),7),
rep(paste0(sample(alphanum, 5, replace = TRUE), collapse = ""),5)),
seq.ID = c(rep(paste0(sample(alphanum, 2, replace = TRUE), collapse = ""),27)),
abundance = runif(27, 0, 1)
)
create_facet_column <- function(df, n) {
df %>%
group_by(sample.ID) %>%
summarise() %>%
mutate(rn = row_number()) %>%
mutate(facet_column = letters[ceiling(rn / (nrow(.) / n))]) %>%
right_join(df, by = "sample.ID")
}
tmp2 <- create_facet_column(tmp, 3)
print(tmp2, n=28)
tmp2 <- create_facet_column(tmp, 2)
print(tmp2, n=28)
devtools::load_all(".")
devtools::load_all(".")
seqs_viwer()
seqs_viewer()
devtools::load_all(".")
seqs_viewer()
devtools::load_all(".")
seqs_viewer()
devtools::load_all(".")
seqs_viewer()
devtools::load_all(".")
seqs_viewer()
devtools::load_all(".")
seqs_viewer()
library(ggplot2)
library(gridExtra)
data <- data.frame(x = 1:6, y = 1:6, facet_var = c("A", "B", "C"))
# List to store individual plots
plot_list <- list()
# Create individual plots for each facet
for (facet in unique(data$facet_var)) {
p <- ggplot(data[data$facet_var == facet, ], aes(x, y)) +
geom_point() +
ggtitle(paste("Facet", facet))
plot_list[[facet]] = p
}
# Arrange the plots
grid.arrange(grobs = plot_list, ncol = 1)
devtools::load_all(".")
library(ggplot2)
library(gridExtra)
data <- data.frame(x = 1:6, y = 1:6, facet_var = c("A", "B", "C"))
# List to store individual plots
plot_list <- list()
# Create individual plots for each facet
for (facet in unique(data$facet_var)) {
p <- ggplot(data[data$facet_var == facet, ], aes(x, y)) +
geom_point() +
ggtitle(paste("Facet", facet))
plot_list[[facet]] = p
}
# Arrange the plots
grid.arrange(grobs = plot_list, ncol = 1)
seqs_viewer()
devtools::load_all(".")
seqs_viewer()
devtools::load_all(".")
seqs_viewer()
?facet_wrap
devtools::load_all(".")
?facet_wrap
seqs_viewer()
?facet_wrap
seqs_viewer()
library(ggforce)
devtools::load_all(".")
library(ggforce)
seqs_viewer()
?facet_col
library(ggforce)
devtools::load_all(".")
seqs_viewer()
devtools::load_all(".")
seqs_viewer()
seqs_viewer()
seqs_viewer()
devtools::load_all(".")
seqs_viewer()
devtools::load_all(".")
seqs_viewer()
devtools::load_all(".")
seqs_viewer()
devtools::load_all(".")
seqs_viewer()
devtools::load_all(".")
seqs_viewer()
devtools::load_all(".")
seqs_viewer()
getwd()
folder_path <- "/Users/rof011/symbiodinium/20230120T102936_esampayo""
plot_data_new <- extract_seqs_long(folder_path, type = "absolute")
plot_data_new2 <- extract_seqs_wide(folder_path, type = "absolute")
colour.seqs_new <- extract_plot_colors(folder_path)
its2.type.names_new <- extract_its2_names(folder_path)
folder_path <- "/Users/rof011/symbiodinium/20230120T102936_esampayo"
plot_data_new <- extract_seqs_long(folder_path, type = "absolute")
plot_data_new2 <- extract_seqs_wide(folder_path, type = "absolute")
colour.seqs_new <- extract_plot_colors(folder_path)
its2.type.names_new <- extract_its2_names(folder_path)
plot_data_new
plot_data_new |>
select(sample.ID, seq.ID, abundance)
plot_data_new |>
select(sample.ID, seq.ID, abundance) |>
pivot_wider(names_from = sample.ID, values_from = abundance, values_fill = 0) |>
column_to_rownames("seq.ID") |>
t()
dist_data <- plot_data_new |>
select(sample.ID, seq.ID, abundance) |>
pivot_wider(names_from = sample.ID, values_from = abundance, values_fill = 0) |>
column_to_rownames("seq.ID") |>
t()
hclust_bray <- labels(hclust(vegdist(dist_data, "bray")))
hclust_euclidean <- labels(hclust(vegdist(dist_data, "euclidean")))
hclust_jaccard <- labels(hclust(vegdist(dist_data, "jaccard")))
hclust_hellinger <- labels(hclust(vegdist(dist_data, "hellinger")))
hclust_hellinger
hclust_jaccard
hclust(vegdist(dist_data, "jaccard"))
str)hclust(vegdist(dist_data, "jaccard"))
str(hclust(vegdist(dist_data, "jaccard")))
hclust_bray <- (hclust(vegdist(dist_data, "bray")))$labels
hclust_euclidean <- (hclust(vegdist(dist_data, "euclidean")))$labels
hclust_jaccard <- (hclust(vegdist(dist_data, "jaccard")))$labels
hclust_hellinger <- (hclust(vegdist(dist_data, "hellinger")))$labels
hclust_hellinger
hclust_euclidean
hclust_jaccard <- (hclust(vegdist(dist_data, "jaccard")))$labels
hclust_jaccard
hclust_hellinger <- (hclust(vegdist(dist_data, "hellinger")))$labels
hclust_hellinger
(hclust(vegdist(dist_data, "hellinger")))$labels
dist_data
labels(hclust(vegdist(dist_data, "bray")))
labels(hclust_bray)
hc_result <- hclust(vegdist(dist_data, "bray"))
updated_labels <- labels(hc_result)
updated_labels
hc_result <- hclust(vegdist(dist_data, "bray"))
updated_labels <- labels(hc_result)
updated_labels
?labels
# Assuming dist_data is already defined
hc_result <- hclust(vegdist(dist_data, "bray"))
updated_order <- hc_result$order
updated_labels <- hc_result$labels[updated_order]
updated_labels
hclust_bray$order
hclust_bray$order
# Assuming dist_data is already defined
hclust_bray <- hclust(vegdist(dist_data, "bray"))
hclust_bray$order
hclust_bray <- hclust(vegdist(dist_data, "bray"))
updated_order <- hclust_bray$order
hclust_bray_order <- hclust_bray$labels[updated_order]
hclust_bray_order
hclust_euclidean <- hclust(vegdist(dist_data, "euclidean"))
hclust_euclidean <- hclust(vegdist(dist_data, "euclidean"))
updated_order <- hclust_euclidean$order
hclust_euclidean_order <- hclust_euclidean$labels[updated_order]
hclust_euclidean_order
devtools::load_all(".")
hclust_euclidean_order
seqs_viewer()
seqs_viewer()
devtools::load_all(".")
seqs_viewer()
devtools::load_all(".")
seqs_viewer()
devtools::load_all(".")
seqs_viewer()
devtools::load_all(".")
seqs_viewer()
devtools::load_all(".")
seqs_viewer()
seqs_viewer()
folder_path <- "/Users/rof011/symbiodinium/20230120T102936_esampayo"
extract_seqs_wide(folder_path)
tmp <- extract_seqs_wide(folder_path)
hclust_bray <- hclust(vegdist(tmp, "bray"))
updated_order_bray <- hclust_bray$order
hclust_bray_order <- hclust_bray$labels[updated_order]
hclust_bray
tmp2 <- tmp %>%
mutate(sample.ID = factor(sample.ID, levels = hclust_bray_order)) %>%
arrange(sample.ID)
tmp_long <- extract_seqs_long(folder_path)
tmp_long
tmp_long %>%
mutate(sample.ID = factor(sample.ID, levels = hclust_bray_order)) %>%
arrange(sample.ID)
hclust_bray_order
seqs_viewer()
plot(hclust_bray)
seqs_viewer()
hclust_bray
hclust_bray$order
updated_order_bray <- hclust_bray$order
hclust_bray$labels[updated_order]
hclust_bray <- hclust(vegdist(tmp, "bray"))
updated_order_bray <- hclust_bray$order
hclust_bray_order <- hclust_bray$labels[updated_order_bray]
hclust_bray_order
hclust_euclidean <- hclust(vegdist(tmp, "euclidean"))
devtools::load_all(".")
seqs_viewer()
folder_path <- "/Users/rof011/symbiodinium/20230120T102936_esampayo"
tmp <- extract_seqs_wide(folder_path)
hclust_bray <- hclust(vegdist(tmp, "bray"))
updated_order_bray <- hclust_bray$order
hclust_bray_order <- hclust_bray$labels[updated_order_bray]
plot(hclust_bray)
tmp_long <- extract_seqs_long(folder_path)
tmp2_long <- tmp_long %>%
mutate(sample.ID = factor(sample.ID, levels = hclust_bray_order)) %>%
arrange(sample.ID)
tmp2_long
unique(tmp2_long$sample.ID)
use_version()
use_version()
folder_path <- "/Users/rof011/symbiodinium/20230120T102936_esampayo"
extract_seqs_wide(folder_path)
tmp <- extract_seqs_wide(folder_path)
hclust_bray <- hclust(vegdist(tmp, "bray"))
updated_order_bray <- hclust_bray$order
hclust_bray_order <- hclust_bray$labels[updated_order]
hclust_bray
tmp2 <- tmp %>%
mutate(sample.ID = factor(sample.ID, levels = hclust_bray_order)) %>%
arrange(sample.ID)
tmp
tmp_long <- extract_seqs_long(folder_path)
tmp_long
tmp_long %>%
mutate(sample.ID = factor(sample.ID, levels = hclust_bray_order)) %>%
arrange(sample.ID)
hclust_bray_order
