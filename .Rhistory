dplyr::rename("sample.ID" = 2) %>%
dplyr::select(-1) %>%
dplyr::filter(!sample.ID == "") %>%
dplyr::pivot_longer(-sample.ID) %>%
dplyr::filter(value > 0) %>%
dplyr::arrange(sample.ID) %>%
dplyr::filter(!sample.ID == "") %>%
dplyr::select(-value) %>%
tidyr::pivot_wider(id_cols = "sample.ID", names_from = "name", values_from = "name", values_fn = list(am = length)) %>%
tidyr::unite("strings", 2:ncol(.), na.rm = TRUE, sep = "=") %>%
tidyr::separate(strings, paste0("ITS2.profile.", 1:5), sep = "=") %>%
as.data.frame() %>%
tidyr::rename(sample.ID = sample.ID)
})
}
SymVar_profiles <- read.delim("/Users/rof011/Symbiodinium/20220919T102058_esampayo/", check.names = FALSE, header = FALSE)
# function to get ITS2 type profile from Symportal output
get_its2_profile <- function(profile) {
suppressWarnings({
# function to get ITS2 type profile from Symportal output
profile %>%
janitor::row_to_names(row_number = 7) %>%
dplyr::rename("sample.ID" = 2) %>%
dplyr::select(-1) %>%
dplyr::filter(!sample.ID == "") %>%
tidyr::pivot_longer(-sample.ID) %>%
dplyr::filter(value > 0) %>%
dplyr::arrange(sample.ID) %>%
dplyr::filter(!sample.ID == "") %>%
dplyr::select(-value) %>%
tidyr::pivot_wider(id_cols = "sample.ID", names_from = "name", values_from = "name", values_fn = list(am = length)) %>%
tidyr::unite("strings", 2:ncol(.), na.rm = TRUE, sep = "=") %>%
tidyr::separate(strings, paste0("ITS2.profile.", 1:5), sep = "=") %>%
as.data.frame() %>%
dplyr::rename(sample.ID = sample.ID)
})
}
SymVar_profiles <- read.delim("/Users/rof011/Symbiodinium/20220919T102058_esampayo/its2_type_profiles/224_20220926T061917_DBV_20220926T133809.profiles.relative.abund_and_meta.txt", check.names = FALSE, header = FALSE)
get_its2_profile(profile = SymVar_profiles)
# function to get ITS2 type profile from Symportal output
get_its2_profile <- function(profile) {
suppressWarnings({
# function to get ITS2 type profile from Symportal output
profile %>%
janitor::row_to_names(row_number = 7) %>%
dplyr::rename("sample.ID" = 2) %>%
dplyr::select(-1) %>%
dplyr::filter(!sample.ID == "") %>%
tidyr::pivot_longer(-sample.ID) %>%
dplyr::filter(value > 0) %>%
dplyr::arrange(sample.ID) %>%
dplyr::filter(!sample.ID == "") %>%
dplyr::select(-value) %>%
tidyr::pivot_wider(id_cols = "sample.ID", names_from = "name", values_from = "name", values_fn = list(am = length)) %>%
tidyr::unite("strings", 2:ncol(.), na.rm = TRUE, sep = "=") %>%
tidyr::separate(strings, paste0("ITS2.profile.", 1:5), sep = "=") %>%
as.data.frame() %>%
dplyr::rename(sample.ID = sample.ID)
})
}
SymVar_profiles <- read.delim("/Users/rof011/Symbiodinium/20220919T102058_esampayo/its2_type_profiles/224_20220926T061917_DBV_20220926T133809.profiles.relative.abund_and_meta.txt", check.names = FALSE, header = FALSE)
get_its2_profile(profile = SymVar_profiles)
# function to get ITS2 type profile from Symportal output
get_its2_profile <- function(profile) {
suppressWarnings({
# function to get ITS2 type profile from Symportal output
profile %>%
janitor::row_to_names(row_number = 7) %>%
dplyr::rename("sample.ID" = 2) %>%
dplyr::select(-1) %>%
dplyr::filter(!sample.ID == "") %>%
tidyr::pivot_longer(-sample.ID) %>%
dplyr::filter(value > 0) %>%
dplyr::arrange(sample.ID) %>%
dplyr::filter(!sample.ID == "") %>%
dplyr::select(-value) %>%
tidyr::pivot_wider(id_cols = "sample.ID", names_from = "name", values_from = "name", values_fn = list(am = length)) %>%
tidyr::unite("strings", 2:ncol(.), na.rm = TRUE, sep = "=") %>%
tidyr::separate(strings, paste0("ITS2.profile.", 1:5), sep = "=") %>%
as.data.frame() %>%
dplyr::rename(sample.ID = sample.ID)
})
}
SymVar_profiles <- read.delim("/Users/rof011/Symbiodinium/20220919T102058_esampayo/its2_type_profiles/224_20220926T061917_DBV_20220926T133809.profiles.relative.abund_and_meta.txt", check.names = FALSE, header = FALSE)
get_its2_profile(profile = SymVar_profiles)
# function to get ITS2 type profile from Symportal output
get_its2_profile <- function(profile) {
suppressWarnings({
# function to get ITS2 type profile from Symportal output
profile %>%
janitor::row_to_names(row_number = 7) %>%
dplyr::rename("sample.ID" = 2) %>%
dplyr::select(-1) %>%
dplyr::filter(!sample.ID == "") %>%
tidyr::pivot_longer(-sample.ID) %>%
dplyr::filter(value > 0) %>%
dplyr::arrange(sample.ID) %>%
dplyr::filter(!sample.ID == "") %>%
dplyr::select(-value) %>%
tidyr::pivot_wider(id_cols = "sample.ID", names_from = "name", values_from = "name", values_fn = list(am = length)) %>%
tidyr::unite("strings", 2:ncol(.), na.rm = TRUE, sep = "=") %>%
tidyr::separate(strings, paste0("ITS2.profile.", 1:5), sep = "=") %>%
as.data.frame() %>%
dplyr::rename(sample.ID = sample.ID)
})
}
SymVar_profiles <- read.delim("/Users/rof011/Symbiodinium/20220919T102058_esampayo/its2_type_profiles/224_20220926T061917_DBV_20220926T133809.profiles.relative.abund_and_meta.txt", check.names = FALSE, header = FALSE)
get_its2_profile(profile = SymVar_profiles)
# function to get ITS2 type profile from Symportal output
get_its2_profile <- function(profile) {
suppressWarnings({
# function to get ITS2 type profile from Symportal output
profile %>%
janitor::row_to_names(row_number = 7) %>%
dplyr::rename("sample.ID" = 2) %>%
dplyr::select(-1) %>%
dplyr::filter(!sample.ID == "") %>%
tidyr::pivot_longer(-sample.ID) %>%
dplyr::filter(value > 0) %>%
dplyr::arrange(sample.ID) %>%
dplyr::filter(!sample.ID == "") %>%
dplyr::select(-value) %>%
tidyr::pivot_wider(id_cols = "sample.ID", names_from = "name", values_from = "name", values_fn = list(am = length)) %>%
tidyr::unite("strings", 2:ncol(.), na.rm = TRUE, sep = "=") %>%
tidyr::separate(strings, paste0("ITS2.profile.", 1:5), sep = "=") %>%
as.data.frame() %>%
dplyr::rename(sample.ID = sample.ID)
})
}
SymVar_profiles <- read.delim("/Users/rof011/Symbiodinium/20220919T102058_esampayo/its2_type_profiles/224_20220926T061917_DBV_20220926T133809.profiles.relative.abund_and_meta.txt", check.names = FALSE, header = FALSE)
get_its2_profile(profile = SymVar_profiles)
# function to get ITS2 type profile from Symportal output
get_its2_profile <- function(profile) {
suppressWarnings({
# function to get ITS2 type profile from Symportal output
profile %>%
janitor::row_to_names(row_number = 7) %>%
dplyr::rename("sample.ID" = 2) %>%
dplyr::select(-1) %>%
dplyr::filter(!sample.ID == "") %>%
tidyr::pivot_longer(-sample.ID) %>%
dplyr::filter(value > 0) %>%
dplyr::arrange(sample.ID) %>%
dplyr::filter(!sample.ID == "") %>%
dplyr::select(-value) %>%
tidyr::pivot_wider(id_cols = "sample.ID", names_from = "name", values_from = "name", values_fn = list(am = length)) %>%
tidyr::unite("strings", 2:ncol(.), na.rm = TRUE, sep = "=") %>%
tidyr::separate(strings, paste0("ITS2.profile.", 1:5), sep = "=") %>%
as.data.frame() %>%
dplyr::rename(sample.ID = sample.ID)
})
}
SymVar_profiles <- read.delim("/Users/rof011/Symbiodinium/20220919T102058_esampayo/its2_type_profiles/224_20220926T061917_DBV_20220926T133809.profiles.relative.abund_and_meta.txt", check.names = FALSE, header = FALSE)
get_its2_profile(profile = SymVar_profiles)
tmp <- extract_its2_profile(folder="20220919T102058_esampayo")
tmp <- extract_its2_profile(folder="/Users/rof011/Symbiodinium/20220919T102058_esampayo/)
tmp <- extract_its2_profile(folder="/Users/rof011/Symbiodinium/20220919T102058_esampayo/")
folder="/Users/rof011/Symbiodinium/20220919T102058_esampayo/"
file_list <- list.files(path = folder, pattern = "profiles.relative.abund_and_meta.txt", include.dirs = TRUE, recursive = TRUE)
its_profile <- read.delim(paste0(folder, "/", file_list)) %>%
janitor::row_to_names(row_number = 7)
file_list <- list.files(path = folder, pattern = "profiles.relative.abund_and_meta.txt", include.dirs = TRUE, recursive = TRUE)
its_profile <- read.delim(paste0(folder, "/", file_list))
its_profile
#' Function to extract its2_profile from Symporal
#'
#' @param folder location of the root Symportal output
#' @export
#' @return its_profile A data.frame of ITS profiles for each sample.ID
#' @examples
#' ## not run:
#'  tmp <- extract_seqs(folder="20220919T102058_esampayo", type="absolute", clade=c("C", "D"))
#
#' # tmp2 <- extract_seqs(folder="20220919T102058_esampayo", type="relative", clade="C", cutoff=100)
extract_its2_profile <- function(folder) {
suppressWarnings({
# function to get ITS2 type profile from Symportal output
file_list <- list.files(path = folder, pattern = "profiles.relative.abund_and_meta.txt", include.dirs = TRUE, recursive = TRUE)
its_profile <- read.delim(paste0(folder, "/", file_list), check.names = FALSE, header = F) %>%
janitor::row_to_names(row_number = 7) %>%
dplyr::rename("sample.ID" = 2) %>%
dplyr::select(-1) %>%
dplyr::filter(!sample.ID == "") %>%
tidyr::pivot_longer(-sample.ID) %>%
dplyr::filter(value > 0) %>%
dplyr::arrange(sample.ID) %>%
dplyr::filter(!sample.ID == "") %>%
dplyr::select(-value) %>%
tidyr::pivot_wider(id_cols = "sample.ID", names_from = "name", values_from = "name", values_fn = list(am = length)) %>%
tidyr::unite("strings", 2:ncol(.), na.rm = TRUE, sep = "=") %>%
tidyr::separate(strings, paste0("ITS2.profile.", 1:5), sep = "=") %>%
as.data.frame() %>%
dplyr::rename(sample.ID = sample.ID)
return(its_profile)
})
}
tmp <- extract_its2_profile(folder="/Users/rof011/Symbiodinium/20220919T102058_esampayo/")
tmp
document()
library(devtools)
document()
#' Function to extract its2 profiles from Symportal
#'
#' @param folder location of the root Symportal output
#' @export
#' @return its_profile_UID A data.frame of ITS profiles for each UID
#' @examples
#'
#' tmp <- extract_its2_profile(folder="/Users/rof011/Symbiodinium/20220919T102058_esampayo/")
extract_its2_profile <- function(folder) {
suppressWarnings({
# function to get ITS2 type profile from Symportal output
file_list <- list.files(path = folder, pattern = "profiles.relative.abund_and_meta.txt", include.dirs = TRUE, recursive = TRUE)
its_profile_UID <- read.delim(paste0(folder, "/", file_list), check.names = FALSE, header = F) %>%
janitor::row_to_names(row_number = 1) %>%
dplyr::rename("sample.ID" = 2) %>%
dplyr::select(-1) %>%
dplyr::filter(!sample.ID == "") %>%
tidyr::pivot_longer(-sample.ID) %>%
dplyr::filter(value > 0) %>%
dplyr::arrange(sample.ID) %>%
dplyr::filter(!sample.ID == "") %>%
dplyr::select(-value) %>%
tidyr::pivot_wider(id_cols = "sample.ID", names_from = "name", values_from = "name", values_fn = list(am = length)) %>%
tidyr::unite("strings", 2:ncol(.), na.rm = TRUE, sep = "=") %>%
tidyr::separate(strings, paste0("ITS2.profile.UID.", 1:5), sep = "=") %>%
as.data.frame() %>%
dplyr::rename(sample.ID = sample.ID)
return(its_profile_UID)
})
}
extract_its2_profile_UID(folder="/Users/rof011/Symbiodinium/20220919T102058_esampayo/")
#' Function to extract its2 profiles from Symportal
#'
#' @param folder location of the root Symportal output
#' @export
#' @return its_profile_UID A data.frame of ITS profiles for each UID
#' @examples
#'
#' tmp <- extract_its2_profile_UID(folder="/Users/rof011/Symbiodinium/20220919T102058_esampayo/")
extract_its2_profile_UID <- function(folder) {
suppressWarnings({
# function to get ITS2 type profile from Symportal output
file_list <- list.files(path = folder, pattern = "profiles.relative.abund_and_meta.txt", include.dirs = TRUE, recursive = TRUE)
its_profile_UID <- read.delim(paste0(folder, "/", file_list), check.names = FALSE, header = F) %>%
janitor::row_to_names(row_number = 1) %>%
dplyr::rename("sample.ID" = 2) %>%
dplyr::select(-1) %>%
dplyr::filter(!sample.ID == "") %>%
tidyr::pivot_longer(-sample.ID) %>%
dplyr::filter(value > 0) %>%
dplyr::arrange(sample.ID) %>%
dplyr::filter(!sample.ID == "") %>%
dplyr::select(-value) %>%
tidyr::pivot_wider(id_cols = "sample.ID", names_from = "name", values_from = "name", values_fn = list(am = length)) %>%
tidyr::unite("strings", 2:ncol(.), na.rm = TRUE, sep = "=") %>%
tidyr::separate(strings, paste0("ITS2.profile.UID.", 1:5), sep = "=") %>%
as.data.frame() %>%
dplyr::rename(sample.ID = sample.ID)
return(its_profile_UID)
})
}
extract_its2_profile_UID(folder="/Users/rof011/Symbiodinium/20220919T102058_esampayo/")
document()
m(list = c("extract_its2_profile"))
rm(list = c("extract_its2_profile"))
#' Function to extract its2 profile and UIDs from Symportal
#'
#' @param folder location of the root Symportal output
#' @export
#' @return its_profile_UID A data.frame of ITS profiles for each UID
#' @examples
#'
#' tmp <- extract_its2_profile_UID(folder="/Users/rof011/Symbiodinium/20220919T102058_esampayo/")
extract_its2 <- function(folder) {
suppressWarnings({
# function to get ITS2 type profile from Symportal output
file_list <- list.files(path = folder, pattern = "profiles.relative.abund_and_meta.txt", include.dirs = TRUE, recursive = TRUE)
its_profile_UID <- read.delim(paste0(folder, "/", file_list), check.names = FALSE, header = F)
a <- get_its2_profile(folder=folder)
b <- get_its2_profile_UID(folder=folder)
its_profile <- left_join(a, b, by = "sample.ID") %>%
as.data.frame()
return(its_profile)
})
}
tmp <- extract_its2(folder="/Users/rof011/Symbiodinium/20220919T102058_esampayo/")
#' Function to extract its2 profile and UIDs from Symportal
#'
#' @param folder location of the root Symportal output
#' @export
#' @return its_profile_UID A data.frame of ITS profiles for each UID
#' @examples
#'
#' tmp <- extract_its2(folder="/Users/rof011/Symbiodinium/20220919T102058_esampayo/")
extract_its2 <- function(folder) {
a <- get_its2_profile(folder=folder)
b <- get_its2_profile_UID(folder=folder)
its_profile <- left_join(a, b, by = "sample.ID") %>%
as.data.frame()
return(its_profile)
}
tmp <- extract_its2(folder="/Users/rof011/Symbiodinium/20220919T102058_esampayo/")
get_its2_profile
#' Function to extract its2 profile and UIDs from Symportal
#'
#' @param folder location of the root Symportal output
#' @export
#' @return its_profile_UID A data.frame of ITS profiles for each UID
#' @examples
#'
#' tmp <- extract_its2(folder="/Users/rof011/Symbiodinium/20220919T102058_esampayo/")
extract_its2 <- function(folder) {
a <- extract_its2_profile(folder=folder)
b <- extract_its2_profile_UID(folder=folder)
its_profile <- left_join(a, b, by = "sample.ID") %>%
as.data.frame()
return(its_profile)
}
tmp <- extract_its2(folder="/Users/rof011/Symbiodinium/20220919T102058_esampayo/")
tmp
document()
rm(list = c("extract_its2_profile_UID"))
#' Function to extract metadata from symportal output
#'
#' @param folder location of the root Symportal output
#' @export
#' @return A data.frame of seq.ID (columns) and sample.ID (rows) with either relative or absolute abundance of sequences.
#' @examples
#' ## not run:
#' # tmp <- extract_seqs(folder="20220919T102058_esampayo", type="absolute", clade=c("C", "D"))
extract_metadata <- function(folder, type = "relative", clade = LETTERS[1:10], cutoff=1000, silent=TRUE) {
file_list <- list.files(path = folder, pattern = "seqs.absolute.abund_and_meta.txt", include.dirs = TRUE, recursive = TRUE)
metadata <- read.delim(paste0(folder, "/", file_list)) %>%
dplyr::select(sample_name, 1:39)
return(metadata)
}
tmp <- extract_metadata(folder="20220919T102058_esampayo")
tmp <- extract_metadata(folder="/Users/rof011/symbiodinium/20220919T102058_esampayo")
tmp
document()
rm(list = c("extract_its2"))
document()
rm(list = c("extract_metadata"))
document()
build()
check()
tmp <- extract_its2(folder="/Users/rof011/Symbiodinium/20220919T102058_esampayo/")
tmp
#' Function to extract sequences from symportal output
#'
#' @param folder location of the root Symportal output
#' @param type returns either "relative" or "absolute"
#' @param clade filter by single "C" or multiple clades c("C", "D") to filter sequences by
#' @param cutoff Set threshold to remove samples if less than the cutoff (defaults to 1000)
#' @param silent defaults to TRUE, if FALSE then prints a list of removed sample names
#' @export
#' @return A data.frame of seq.ID (columns) and sample.ID (rows) with either relative or absolute abundance of sequences.
#' @examples
#'
#' tmp <- extract_seqs(folder="/Users/rof011/symbiodinium/20220919T102058_esampayo", type="absolute", clade=c("C", "D"))
#
#' tmp2 <- extract_seqs(folder="/Users/rof011/symbiodinium/20220919T102058_esampayo", type="relative", clade="C", cutoff=100)
extract_seqs <- function(folder, type = "relative", clade = LETTERS[1:10], cutoff=1000, silent=TRUE) {
file_list <- list.files(path = folder, pattern = "seqs.absolute.abund_and_meta.txt", include.dirs = TRUE, recursive = TRUE)
absolute <- read.delim(paste0(folder, "/", file_list)) |>
dplyr::select(sample_name, 40:ncol(.)) |> # select just the symbiodinium columns
tibble::column_to_rownames("sample_name") |> # sample_name column to rowname
dplyr::slice(-n()) |> # remove the last row, summary data
dplyr::filter(rowSums(select(., where(is.numeric))) > as.numeric(cutoff)) |> # remove samples where <1000 sequences
dplyr::select(dplyr::matches(clade, ignore.case = FALSE)) |> # keep only columns matching "clade"
dplyr::filter(rowSums(dplyr::select(., dplyr::where(is.numeric))) != 0) |> # drop zero sum rows
dplyr::select(dplyr::where(~ sum(. != 0) > 0)) |> # drop zero sum columns
dplyr::select(dplyr::where(~ any(!is.na(.))))  # drop blank columns
excluded_samples <- read.delim(paste0(folder, "/", file_list)) |>
dplyr::select(sample_name, 40:ncol(.)) |> # select just the symbiodinium columns
tibble::column_to_rownames("sample_name") |> # sample_name column to rowname
dplyr::slice(-n()) |> # remove the last row, summary data
dplyr::select(dplyr::matches(clade, ignore.case = FALSE)) |> # keep only columns matching "clade"
dplyr::filter(rowSums(select(., where(is.numeric))) < as.numeric(cutoff)) # remove samples where <1000 sequences
if (silent==FALSE){
cat("Excluded samples \n")
cat(paste0(" - ", unique(rownames(excluded_samples)), collapse="\n"), " \n")
}
relative <- read.delim(paste0(folder, "/", file_list)) |>
dplyr::select(sample_name, 40:ncol(.)) |> # select just the symbiodinium columns
tibble::column_to_rownames("sample_name") |> # sample_name column to rowname
dplyr::slice(-n()) |> # remove the last row, summary data
dplyr::filter(rowSums(select(., where(is.numeric))) > as.numeric(cutoff)) |> # remove samples where <1000 sequences
dplyr::select(dplyr::matches(clade, ignore.case = FALSE)) |> # keep only columns matching "clade"
dplyr::filter(rowSums(dplyr::select(., dplyr::where(is.numeric))) != 0) |> # drop zero sum rows
dplyr::select(dplyr::where(~ sum(. != 0) > 0)) |> # drop zero sum columns
dplyr::select(dplyr::where(~ any(!is.na(.)))) |> # drop blank columns
dplyr::mutate(row_sum = rowSums(select(., dplyr::where(is.numeric)))) |>
dplyr::mutate(across(dplyr::where(is.numeric), ~ . / row_sum)) |>
dplyr::select(-row_sum)
if (type == "absolute") {
return(absolute)
} else if (type == "relative") {
return(relative)
}
}
tmp <- extract_seqs(folder="/Users/rof011/symbiodinium/20220919T102058_esampayo", type="absolute", clade=c("C", "D"))
check()
check()
check()
extract_its2 <- function(folder) {
a <- extract_its2_profile(folder=folder)
b <- extract_its2_profile_UID(folder=folder)
its_profile <- left_join(a, b, by = "sample.ID") |>
as.data.frame()
return(its_profile)
}
tmp <- extract_its2(folder="/Users/rof011/Symbiodinium/20220919T102058_esampayo/")
tmp
document()
rm(list = c("extract_its2", "extract_seqs"))
check
check()
check()
#' Function to extract its2 profile and UIDs from Symportal
#'
#' @param folder location of the root Symportal output
#' @export
#' @return its_profile_UID A data.frame of ITS profiles for each UID
#' @examples
#' tmp <- extract_its2(folder="/Users/rof011/Symbiodinium/20220919T102058_esampayo/")
extract_its2 <- function(folder) {
a <- symportalfunctions::extract_its2_profile(folder=folder)
b <- symportalfunctions::extract_its2_profile_UID(folder=folder)
its_profile <- dplyr::left_join(a, b, by = "sample.ID") |>
as.data.frame()
return(its_profile)
}
check()
use_pipe(export = TRUE)
check()
extract_its2(folder="/Users/rof011/Symbiodinium/20220919T102058_esampayo/")
extract_seqs(folder="/Users/rof011/symbiodinium/20220919T102058_esampayo", type="absolute", clade=c("C", "D"))
extract_seqs(folder="/Users/rof011/symbiodinium/20220919T102058_esampayo", type="relative", clade="C", cutoff=100)
check()
document()
rm(list = c("extract_its2"))
document()
check()
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(tidyverse)
library(ggplot2)
library(devtools)
#install("/Users/rof011/symportalfunctions")
library(symportalfunctions)
tmp <- extract_seqs(folder="/Users/rof011/symbiodinium/20220919T102058_esampayo", type="absolute")
extract_seqs(folder="/Users/rof011/symbiodinium/20220919T102058_esampayo", type="absolute")
extract_seqs
tmp2 <- extract_seqs(folder="/Users/rof011/symbiodinium/20220919T102058_esampayo", type="relative", clade="C", cutoff=100)
#' Function to extract sequences from symportal output
#'
#' @param folder location of the root Symportal output
#' @param type returns either "relative" or "absolute"
#' @param clade filter by single "C" or multiple clades c("C", "D") to filter sequences by
#' @param cutoff Set threshold to remove samples if less than the cutoff (defaults to 1000)
#' @param silent defaults to TRUE, if FALSE then prints a list of removed sample names
#' @export
#' @return A data.frame of seq.ID (columns) and sample.ID (rows) with either relative or absolute abundance of sequences.
#' @examples
#'
#' #tmp <- extract_seqs(folder="/Users/rof011/symbiodinium/20220919T102058_esampayo", type="absolute", clade=c("C", "D"))
#
#' #tmp2 <- extract_seqs(folder="/Users/rof011/symbiodinium/20220919T102058_esampayo", type="relative", clade="C", cutoff=100)
extract_seqs <- function(folder, type = "relative", clade = LETTERS[1:10], cutoff=1000, silent=TRUE) {
file_list <- list.files(path = folder, pattern = "seqs.absolute. |> abund_and_meta.txt", include.dirs = TRUE, recursive = TRUE)
absolute <- read.delim(paste0(folder, "/", file_list)) %>%
dplyr::select(sample_name, 40:ncol(.)) %>% # select just the symbiodinium columns
tibble::column_to_rownames("sample_name") %>% # sample_name column to rowname
dplyr::slice(-n()) %>% # remove the last row, summary data
dplyr::filter(rowSums(select(., where(is.numeric))) > as.numeric(cutoff)) %>% # remove samples where <1000 sequences
dplyr::select(dplyr::matches(clade, ignore.case = FALSE)) %>% # keep only columns matching "clade"
dplyr::filter(rowSums(dplyr::select(., dplyr::where(is.numeric))) != 0) %>% # drop zero sum rows
dplyr::select(dplyr::where(~ sum(. != 0) > 0)) %>% # drop zero sum columns
dplyr::select(dplyr::where(~ any(!is.na(.))))  # drop blank columns
excluded_samples <- read.delim(paste0(folder, "/", file_list)) %>%
dplyr::select(sample_name, 40:ncol(.)) %>% # select just the symbiodinium columns
tibble::column_to_rownames("sample_name") %>% # sample_name column to rowname
dplyr::slice(-n()) %>% # remove the last row, summary data
dplyr::select(dplyr::matches(clade, ignore.case = FALSE)) %>% # keep only columns matching "clade"
dplyr::filter(rowSums(select(., where(is.numeric))) < as.numeric(cutoff)) # remove samples where <1000 sequences
if (silent==FALSE){
cat("Excluded samples \n")
cat(paste0(" - ", unique(rownames(excluded_samples)), collapse="\n"), " \n")
}
relative <- read.delim(paste0(folder, "/", file_list)) %>%
dplyr::select(sample_name, 40:ncol(.)) %>% # select just the symbiodinium columns
tibble::column_to_rownames("sample_name") %>% # sample_name column to rowname
dplyr::slice(-n()) %>% # remove the last row, summary data
dplyr::filter(rowSums(select(., where(is.numeric))) > as.numeric(cutoff)) %>% # remove samples where <1000 sequences
dplyr::select(dplyr::matches(clade, ignore.case = FALSE)) %>% # keep only columns matching "clade"
dplyr::filter(rowSums(dplyr::select(., dplyr::where(is.numeric))) != 0) %>% # drop zero sum rows
dplyr::select(dplyr::where(~ sum(. != 0) > 0)) %>% # drop zero sum columns
dplyr::select(dplyr::where(~ any(!is.na(.)))) %>% # drop blank columns
dplyr::mutate(row_sum = rowSums(select(., dplyr::where(is.numeric)))) %>%
dplyr::mutate(across(dplyr::where(is.numeric), ~ . / row_sum)) %>%
dplyr::select(-row_sum)
if (type == "absolute") {
return(absolute)
} else if (type == "relative") {
return(relative)
}
}
tmp2 <- extract_seqs(folder="/Users/rof011/symbiodinium/20220919T102058_esampayo", type="relative", clade="C", cutoff=100)
