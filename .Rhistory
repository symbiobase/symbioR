ggplot() + theme_ridges() + ylab("") +
geom_ridgeline(data=plot_data, aes(x = numeric.ID, y = sample.ID, height = abundance*2, fill=sample.ID), alpha=0.4, show.legend=FALSE)
ggplot() + theme_ridges() + ylab("") +
geom_ridgeline(data=plot_data2, aes(x = numeric.ID, y = sample.ID, height = abundance*2, fill=sample.ID), alpha=0.4, show.legend=FALSE)
plot_data <- extract_seqs_long(folder="/Users/rof011/symbiodinium/20220919T102058_esampayo", type="relative",  clade="C") |>
mutate(numeric.ID = as.numeric((as.factor(seq.ID)))) |>
mutate(sample.ID = as.factor(sample.ID)) |>
#  filter(abundance>0.01) |>
complete(seq.ID, sample.ID) |>
filter(sample.ID %in% levels(sample.ID)[1:10]) |>
mutate(numeric.ID = as.numeric((as.factor(seq.ID)))) |>
replace_na(list(abundance = 0)) |> filter(sample.ID=="H00B06_ES22OT") %>%
do(sample_n(., size = nrow(.)))
plot_data2 <- plot_data
plot_data2$numeric.ID <- sample(plot_data2$numeric.ID)
ggplot() + theme_ridges() + ylab("") +
geom_ridgeline(data=plot_data, aes(x = numeric.ID, y = sample.ID, height = abundance*2, fill=sample.ID), alpha=0.4, show.legend=FALSE)
ggplot() + theme_ridges() + ylab("") +
geom_ridgeline(data=plot_data2, aes(x = numeric.ID, y = sample.ID, height = abundance*2, fill=sample.ID), alpha=0.4, show.legend=FALSE)
pkgdown::build_article(test)
getwd()
library(render)
?render
render("test.Rmd", "html_document", output_dir="docs/")
library(rmarkdown)
render("test.Rmd", "html_document", output_dir="docs/")
render("docs/test.Rmd", "html_document", output_dir="docs/")
render("vignettes/test.Rmd", "html_document", output_dir="vignettes/")
library(symportalfunctions)
library(tidyverse)
library(ggridges)
plot_data <- extract_seqs_long(folder="/Users/rof011/symbiodinium/20220919T102058_esampayo", type="relative",  clade="C") |>
mutate(numeric.ID = as.numeric((as.factor(seq.ID)))) |>
mutate(sample.ID = as.factor(sample.ID)) |>
#  filter(abundance>0.01) |>
complete(seq.ID, sample.ID) |>
filter(sample.ID %in% levels(sample.ID)[1:10]) |>
mutate(numeric.ID = as.numeric((as.factor(seq.ID)))) |>
replace_na(list(abundance = 0)) |> filter(sample.ID=="H00B06_ES22OT") %>%
do(sample_n(., size = nrow(.)))
plot_data2 <- plot_data
plot_data2$numeric.ID <- sample(plot_data2$numeric.ID)
ggplot() + theme_ridges() + ylab("") +
geom_ridgeline(data=plot_data, aes(x = numeric.ID, y = sample.ID, height = abundance*2, fill=sample.ID), alpha=0.4, show.legend=FALSE)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(symportalfunctions)
library(tidyverse)
library(ggridges)
plot_data <- extract_seqs_long(folder="/Users/rof011/symbiodinium/20220919T102058_esampayo", type="relative",  clade="C") |>
mutate(numeric.ID = as.numeric((as.factor(seq.ID)))) |>
mutate(sample.ID = as.factor(sample.ID)) |>
#  filter(abundance>0.01) |>
complete(seq.ID, sample.ID) |>
filter(sample.ID %in% levels(sample.ID)[1:10]) |>
mutate(numeric.ID = as.numeric((as.factor(seq.ID)))) |>
replace_na(list(abundance = 0)) |> filter(sample.ID=="H00B06_ES22OT") %>%
do(sample_n(., size = nrow(.)))
plot_data2 <- plot_data
plot_data2$numeric.ID <- sample(plot_data2$numeric.ID)
plot_data2
ggplot() + theme_bw() + geom_bar(data=plot.sequences, aes(fill=seq.ID, y=abundance, x=sample.ID), color="black", position = position_fill(reverse = TRUE), stat="identity") +
theme(legend.position = "bottom", axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) + scale_fill_manual(values = colour.seqs.subset) +
geom_text(data=its2.type.names.subset, aes(x=sample_name, y=1.1, label=UID), angle=90)
colour.seqs <- extract_plot_colors(sym_folder) # get plot colors from symportal folder, no need to every subsample
colour.seqs <- extract_plot_colors("/Users/rof011/symbiodinium/20220919T102058_esampayo") # get plot colors from symportal folder, no need to every subsample
ggplot() + theme_bw() +
geom_bar(data=plot_data2, aes(fill=seq.ID, y=abundance, x=sample.ID), color="black", position = position_fill(reverse = TRUE), stat="identity") +
theme(legend.position = "bottom", axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
scale_fill_manual(values = colour.seqs.subset) +
geom_text(data=its2.type.names.subset, aes(x=sample_name, y=1.1, label=UID), angle=90)
its2.type.names <- extract_its2_names("/Users/rof011/symbiodinium/20220919T102058_esampayo")
ggplot() + theme_bw() +
geom_bar(data=plot_data2, aes(fill=seq.ID, y=abundance, x=sample.ID), color="black", position = position_fill(reverse = TRUE), stat="identity") +
theme(legend.position = "bottom", axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
scale_fill_manual(values = colour.seqs) +
geom_text(data=its2.type.names, aes(x=sample_name, y=1.1, label=UID), angle=90)
ggplot() + theme_bw() +
geom_bar(data=plot_data2, aes(fill=seq.ID, y=abundance, x=sample.ID), color="black", position = position_fill(reverse = TRUE), legend=FALSE, stat="identity") +
theme(legend.position = "bottom", axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
scale_fill_manual(values = colour.seqs) +
geom_text(data=its2.type.names, aes(x=sample_name, y=1.1, label=UID), angle=90)
ggplot() + theme_bw() +
geom_bar(data=plot_data2, aes(fill=seq.ID, y=abundance, x=sample.ID), color="black", position = position_fill(reverse = TRUE), show.legend=FALSE, stat="identity") +
theme(legend.position = "bottom", axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
scale_fill_manual(values = colour.seqs) +
geom_text(data=its2.type.names, aes(x=sample_name, y=1.1, label=UID), angle=90)
plot_data <- extract_seqs_long(folder="/Users/rof011/symbiodinium/20220919T102058_esampayo", type="relative",  clade="C")
ggplot() + theme_bw() +
geom_bar(data=plot_data2, aes(fill=seq.ID, y=abundance, x=sample.ID), color="black", position = position_fill(reverse = TRUE), show.legend=FALSE, stat="identity") +
theme(legend.position = "bottom", axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
scale_fill_manual(values = colour.seqs) +
geom_text(data=its2.type.names, aes(x=sample_name, y=1.1, label=UID), angle=90)
ggplot() + theme_bw() +
geom_bar(data=plot_data, aes(fill=seq.ID, y=abundance, x=sample.ID), color="black", position = position_fill(reverse = TRUE), show.legend=FALSE, stat="identity") +
theme(legend.position = "bottom", axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
scale_fill_manual(values = colour.seqs) +
geom_text(data=its2.type.names, aes(x=sample_name, y=1.1, label=UID), angle=90)
plot_data <- extract_seqs_long(folder="/Users/rof011/symbiodinium/20220919T102058_esampayo", type="relative",  clade="C") |>
mutate(numeric.ID = as.numeric((as.factor(seq.ID)))) |>
mutate(sample.ID = as.factor(sample.ID)) |>
#  filter(abundance>0.01) |>
complete(seq.ID, sample.ID) |>
filter(sample.ID %in% levels(sample.ID)[1:10]) |>
mutate(numeric.ID = as.numeric((as.factor(seq.ID)))) |>
replace_na(list(abundance = 0)) |> filter(sample.ID=="H00B06_ES22OT") %>%
do(sample_n(., size = nrow(.)))
colour.seqs <- extract_plot_colors("/Users/rof011/symbiodinium/20220919T102058_esampayo") # get plot colors from symportal folder, no need to every subsample
its2.type.names <- extract_its2_names("/Users/rof011/symbiodinium/20220919T102058_esampayo")
ggplot() + theme_bw() +
geom_bar(data=plot_data, aes(fill=seq.ID, y=abundance, x=sample.ID), color="black", position = position_fill(reverse = TRUE), show.legend=FALSE, stat="identity") +
theme(legend.position = "bottom", axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
scale_fill_manual(values = colour.seqs) +
geom_text(data=its2.type.names, aes(x=sample_name, y=1.1, label=UID), angle=90)
plot_data <- extract_seqs_long(folder="/Users/rof011/symbiodinium/20220919T102058_esampayo", type="relative",  clade="C") |>
mutate(numeric.ID = as.numeric((as.factor(seq.ID)))) |>
mutate(sample.ID = as.factor(sample.ID)) |>
#  filter(abundance>0.01) |>
complete(seq.ID, sample.ID) |>
filter(sample.ID %in% levels(sample.ID)[1:10]) |>
mutate(numeric.ID = as.numeric((as.factor(seq.ID)))) |>
replace_na(list(abundance = 0)) |> filter(sample.ID=="H00B06_ES22OT") %>%
do(sample_n(., size = nrow(.)))
colour.seqs <- extract_plot_colors("/Users/rof011/symbiodinium/20220919T102058_esampayo") # get plot colors from symportal folder, no need to every subsample
its2.type.names <- extract_its2_names("/Users/rof011/symbiodinium/20220919T102058_esampayo")
ggplot() + theme_bw() +
geom_bar(data=plot_data, aes(fill=seq.ID, y=abundance, x=sample.ID), color="black", position = position_fill(reverse = TRUE), show.legend=FALSE, stat="identity") +
theme(legend.position = "bottom", axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
scale_fill_manual(values = colour.seqs) +
geom_text(data=its2.type.names, aes(x=sample_name, y=1.1, label=UID), angle=90)
plot_data <- extract_seqs_long(folder="/Users/rof011/symbiodinium/20220919T102058_esampayo", type="relative",  clade="C")
colour.seqs <- extract_plot_colors("/Users/rof011/symbiodinium/20220919T102058_esampayo") # get plot colors from symportal folder, no need to every subsample
its2.type.names <- extract_its2_names("/Users/rof011/symbiodinium/20220919T102058_esampayo")
ggplot() + theme_bw() +
geom_bar(data=plot_data, aes(fill=seq.ID, y=abundance, x=sample.ID), color="black", position = position_fill(reverse = TRUE), show.legend=FALSE, stat="identity") +
theme(legend.position = "bottom", axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
scale_fill_manual(values = colour.seqs) +
geom_text(data=its2.type.names, aes(x=sample_name, y=1.1, label=UID), angle=90)
ggplot() + theme_bw() +
geom_bar(data=plot_data, aes(fill=seq.ID, y=abundance, x=sample.ID), color="black", position = position_fill(reverse = TRUE), show.legend=FALSE, stat="identity") +
theme(legend.position = "bottom", axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
scale_fill_manual(values = colour.seqs) +
geom_text(data=its2.type.names, aes(x=sample_name, y=1.1, label=UID), offset=1, angle=90)
ggplot() + theme_bw() +
geom_bar(data=plot_data, aes(fill=seq.ID, y=abundance, x=sample.ID), color="black", position = position_fill(reverse = TRUE), show.legend=FALSE, stat="identity") +
theme(legend.position = "bottom", axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
scale_fill_manual(values = colour.seqs) +
geom_text(data=its2.type.names, aes(x=sample_name, y=1.1, label=UID), offset=10, angle=90)
ggplot() + theme_bw() +
geom_bar(data=plot_data, aes(fill=seq.ID, y=abundance, x=sample.ID), color="black", position = position_fill(reverse = TRUE), show.legend=FALSE, stat="identity") +
theme(legend.position = "bottom", axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
scale_fill_manual(values = colour.seqs) +
geom_text(data=its2.type.names, aes(x=sample_name, y=1.5, label=UID), , angle=90)
```{r, fig.width=8}
library(symportalfunctions)
library(tidyverse)
library(ggridges)
plot_data <- extract_seqs_long(folder="/Users/rof011/symbiodinium/20220919T102058_esampayo", type="relative",  clade="C")
colour.seqs <- extract_plot_colors("/Users/rof011/symbiodinium/20220919T102058_esampayo") # get plot colors from symportal folder, no need to every subsample
its2.type.names <- extract_its2_names("/Users/rof011/symbiodinium/20220919T102058_esampayo")
ggplot() + theme_bw() +
geom_bar(data=plot_data, aes(fill=seq.ID, y=abundance, x=sample.ID), color="black", position = position_fill(reverse = TRUE), show.legend=FALSE, stat="identity") +
theme(legend.position = "bottom", axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
scale_fill_manual(values = colour.seqs) +
geom_text(data=its2.type.names, aes(x=sample_name, y=1.5, label=UID), angle=90)
ggplot() + theme_bw() +
geom_bar(data=plot_data, aes(fill=seq.ID, y=abundance, x=sample.ID), color="black", linewidth=0.1,
position = position_fill(reverse = TRUE), show.legend=FALSE, stat="identity") +
theme(legend.position = "bottom", axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
scale_fill_manual(values = colour.seqs) +
geom_text(data=its2.type.names, aes(x=sample_name, y=1.5, label=UID), angle=90)
library(symportalfunctions)
library(tidyverse)
library(ggridges)
plot_data <- extract_seqs_long(folder="/Users/rof011/symbiodinium/20220919T102058_esampayo", type="relative",  clade="C")
colour.seqs <- extract_plot_colors("/Users/rof011/symbiodinium/20220919T102058_esampayo") # get plot colors from symportal folder, no need to every subsample
its2.type.names <- extract_its2_names("/Users/rof011/symbiodinium/20220919T102058_esampayo")
ggplot() + theme_bw() +
geom_bar(data=plot_data, aes(fill=seq.ID, y=abundance, x=sample.ID), color="black", linewidth=0.1,
position = position_fill(reverse = TRUE), show.legend=FALSE, stat="identity") +
theme(legend.position = "bottom", axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
scale_fill_manual(values = colour.seqs) +
geom_text(data=its2.type.names, aes(x=sample_name, y=1.5, label=UID), angle=90)
library(symportalfunctions)
library(tidyverse)
library(ggridges)
plot_data <- extract_seqs_long(folder="/Users/rof011/symbiodinium/20220919T102058_esampayo", type="relative",  clade="C")
colour.seqs <- extract_plot_colors("/Users/rof011/symbiodinium/20220919T102058_esampayo") # get plot colors from symportal folder, no need to every subsample
its2.type.names <- extract_its2_names("/Users/rof011/symbiodinium/20220919T102058_esampayo")
ggplot() + theme_bw() +
geom_bar(data=plot_data, aes(fill=seq.ID, y=abundance, x=sample.ID), color="black", linewidth=0.1,
position = position_fill(reverse = TRUE), show.legend=FALSE, stat="identity") +
theme(legend.position = "bottom", axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
scale_fill_manual(values = colour.seqs) +
geom_text(data=its2.type.names, aes(x=sample_name, y=1.5, label=UID),size=0.5, angle=90)
ggplot() + theme_bw() +
geom_bar(data=plot_data, aes(fill=seq.ID, y=abundance, x=sample.ID), color="black", linewidth=0.1,
position = position_fill(reverse = TRUE), show.legend=FALSE, stat="identity") +
theme(legend.position = "bottom", axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
scale_fill_manual(values = colour.seqs) +
geom_text(data=its2.type.names, aes(x=sample_name, y=1.5, label=UID),size=1, angle=90)
ggplot() + theme_bw() +
geom_bar(data=plot_data, aes(fill=seq.ID, y=abundance, x=sample.ID), color="black", linewidth=0.1,
position = position_fill(reverse = TRUE), show.legend=FALSE, stat="identity") +
theme(legend.position = "bottom", axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
scale_fill_manual(values = colour.seqs) +
geom_text(data=its2.type.names, aes(x=sample_name, y=1.5, label=UID),size=4, angle=90)
ggplot() + theme_bw() +
geom_bar(data=plot_data, aes(fill=seq.ID, y=abundance, x=sample.ID), color="black", linewidth=0.1,
position = position_fill(reverse = TRUE), show.legend=FALSE, stat="identity") +
theme(legend.position = "bottom", axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
scale_fill_manual(values = colour.seqs) +
geom_text(data=its2.type.names, aes(x=sample_name, y=1.5, label=UID),size=3, angle=90)
ggplot() + theme_bw() +
geom_bar(data=plot_data, aes(fill=seq.ID, y=abundance, x=sample.ID), color="black", linewidth=0.1,
position = position_fill(reverse = TRUE), show.legend=FALSE, stat="identity") +
theme(legend.position = "bottom", axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
scale_fill_manual(values = colour.seqs) +
geom_text(data=its2.type.names, aes(x=sample_name, y=1.5, label=UID),size=2, angle=90)
install.packages("flexdashboard")
library(flexdashboard)
?selectInput
library(flexdashboard)
library(shiny)
?selectInput
library(symportalfunctions)
library(tidyverse)
library(ggridges)
plot_data <- extract_seqs_long(folder="/Users/rof011/symbiodinium/20220919T102058_esampayo", type="relative",  clade="C")
colour.seqs <- extract_plot_colors("/Users/rof011/symbiodinium/20220919T102058_esampayo") # get plot colors from symportal folder, no need to every subsample
its2.type.names <- extract_its2_names("/Users/rof011/symbiodinium/20220919T102058_esampayo")
plot_data
plot_data
# Load Data
plot_data <- extract_seqs_long(folder="/Users/rof011/symbiodinium/20220919T102058_esampayo", type="relative", clade="C")
colour.seqs <- extract_plot_colors("/Users/rof011/symbiodinium/20220919T102058_esampayo")
its2.type.names <- extract_its2_names("/Users/rof011/symbiodinium/20220919T102058_esampayo")
# UI elements
output$plotUI <- renderPlotly({
filtered_data <- plot_data %>% filter(seq.ID %in% input$seqID)
p <- ggplot() + theme_bw() +
geom_bar(data=filtered_data, aes(fill=seq.ID, y=abundance, x=sample.ID), color="black", linewidth=0.1,
position = position_fill(reverse = TRUE), show.legend=FALSE, stat="identity") +
theme(legend.position = "bottom", axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
scale_fill_manual(values = colour.seqs) +
geom_text(data=its2.type.names, aes(x=sample_name, y=1.5, label=UID), size=2, angle=90)
ggplotly(p)
})
plotlyOutput("plotUI")
?ylim
install.packages("shinyFiles")
library(symportalfunctions)
library(tidyverse)
library(ggplot2)
library(ggridges)
library(plotly)
library(flexdashboard)
library(shiny)
library(shinyFiles)
shinyFiles::shinyFilesExample()
shinyDir <- reactiveVal()
folder_data <- reactiveVal()
observe({
shinyDirChoose(input, 'dir', roots=c(wd='.'), session=session)
if(!is.null(input$dir)) {
shinyDir(parseDirPath(c(wd='.'), input$dir))
folder_path <- shinyDir()
plot_data <- extract_seqs_long(folder=folder_path, type="relative", clade="C")
updateSelectInput(session, "seqID", choices = c("ALL", unique(plot_data$seq.ID)))
colour.seqs <- extract_plot_colors(folder_path)
its2.type.names <- extract_its2_names(folder_path)
folder_data(list(plot_data = plot_data, colour_seqs = colour.seqs, its2_type_names = its2.type.names))
}
})
output$plotUI <- renderPlotly({
data_list <- folder_data()
if (is.null(data_list)) return()
plot_data <- data_list$plot_data
colour.seqs <- data_list$colour_seqs
its2.type.names <- data_list$its2_type_names
filtered_data <- plot_data
if ("ALL" %in% input$seqID) {
filtered_data <- plot_data
} else {
filtered_data <- plot_data %>% filter(seq.ID %in% input$seqID)
}
if (nchar(input$seqIDPattern) > 0) {
pattern_filtered_data <- plot_data %>% filter(grepl(input$seqIDPattern, seq.ID))
filtered_data <- dplyr::bind_rows(filtered_data, pattern_filtered_data)
}
p <- ggplot() + theme_bw()
if (input$abundanceType == "Relative") {
p <- p + geom_bar(data=filtered_data, aes(fill=seq.ID, y=abundance, x=sample.ID), color="black", linewidth=0.1,
position = position_fill(reverse = TRUE), show.legend=FALSE, stat="identity")
} else {
p <- p + geom_bar(data=filtered_data, aes(fill=seq.ID, y=abundance, x=sample.ID), color="black", linewidth=0.1,
show.legend=FALSE, stat="identity")
}
p <- p + theme(legend.position = "bottom", axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
scale_fill_manual(values = colour.seqs) +
geom_text(data=its2.type.names, aes(x=sample_name, y=ifelse(input$abundanceType == "Relative", 1.5, max(filtered_data$abundance)), label=UID), size=2, angle=90)
ggplotly(p)
})
?shinyDirButton
library(shiny)
library(shinyFiles)
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("Example - Shiny Files Buttons Use"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
p("First press this ShinyDir Button to locate an existing folder and set
it to be your new working directory"),
shinyDirButton("folderChoose","Choose Folder","Choose working directory"),
p("In this second step, press the ShinyFiles Button that should point to the
volumes (Just as the previous button does). In my R version, this is where it
renders a white interface (see attached picture"),
shinyFilesButton("filesChoose1","Files Chooser 1","Choose your files",
multiple=TRUE),
p("In this third button, pI owuld like to link the ShinyFiles interface with
the selected folder in button 1. This part I have not been able to solve"),
shinyFilesButton("filesChoose2","Files Chooser 2","Choose your files",
multiple=TRUE)
),
# Show a plot of the generated distribution
mainPanel(
verbatimTextOutput("path")
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output, session) {
volumes = getVolumes()
shinyDirChoose(input, "folderChoose", roots = volumes, session = session)
sel_path <- reactive({return(print(parseDirPath(volumes, input$folderChoose)))})
shinyFileChoose(input, "filesChoose1", roots = volumes, session = session)
setWorkingDir<-eventReactive(input$folderChoose,{
setwd(sel_path())
})
output$path<-renderText(sel_path())
}
# Run the application
shinyApp(ui = ui, server = server)
library(shiny)
library(shinyFiles)
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("Example - Shiny Files Buttons Use"),
# Sidebar with a slider input for number of bins
sidebarPanel(
p("First press this ShinyDir Button to locate an existing folder and set
it to be your new working directory"),
shinyDirButton("folderChoose","Choose Folder","Choose working directory"),
p("In this second step, press the ShinyFiles Button that should point to the
volumes (Just as the previous button does). In my R version, this is where it
renders a white interface (see attached picture"),
shinyFilesButton("filesChoose1","Files Chooser 1","Choose your files",
multiple=TRUE),
p("In this third button, pI owuld like to link the ShinyFiles interface with
the selected folder in button 1. This part I have not been able to solve"),
shinyFilesButton("filesChoose2","Files Chooser 2","Choose your files",
multiple=TRUE)
),
# Show a plot of the generated distribution
mainPanel(
verbatimTextOutput("path")
)
)
# Define server logic required to draw a histogram
server <- function(input, output, session) {
volumes = getVolumes()
shinyDirChoose(input, "folderChoose", roots = volumes, session = session)
sel_path <- reactive({return(print(parseDirPath(volumes, input$folderChoose)))})
shinyFileChoose(input, "filesChoose1", roots = volumes, session = session)
setWorkingDir<-eventReactive(input$folderChoose,{
setwd(sel_path())
})
output$path<-renderText(sel_path())
}
# Run the application
shinyApp(ui = ui, server = server)
library(shiny)
library(shinyFiles)
library(symportalfunctions)
library(tidyverse)
library(ggplot2)
library(plotly)
ui <- fluidPage(
shinyDirButton("dir", "Select Data Folder", "Please select a folder", FALSE),
selectInput("seqID", "Choose seq.ID:", choices = NULL, selected = "ALL", multiple = TRUE),
radioButtons("abundanceType", "Abundance Type:", choices = c("Absolute", "Relative"), selected = "Absolute"),
textInput("seqIDPattern", "Seq.ID Pattern:", value = ""),
plotlyOutput("plotUI")
)
server <- function(input, output, session) {
shinyDir <- reactiveVal()
folder_data <- reactiveVal()
observe({
shinyDirChoose(input, 'dir', roots=c(wd='.'), session=session)
if (!is.null(input$dir)) {
shinyDir(parseDirPath(c(wd='.'), input$dir))
folder_path <- shinyDir()
plot_data <- extract_seqs_long(folder=folder_path, type="relative", clade="C")
updateSelectInput(session, "seqID", choices = c("ALL", unique(plot_data$seq.ID)))
colour.seqs <- extract_plot_colors(folder_path)
its2.type.names <- extract_its2_names(folder_path)
folder_data(list(plot_data = plot_data, colour_seqs = colour.seqs, its2_type_names = its2.type.names))
}
})
output$plotUI <- renderPlotly({
# Your plotting code here, the same as in the flexdashboard example
})
}
shinyApp(ui = ui, server = server)
library(shiny)
library(shinyFiles)
library(symportalfunctions)
library(tidyverse)
library(ggplot2)
library(plotly)
ui <- fluidPage(
shinyDirButton("dir", "Select Data Folder", "Please select a folder", FALSE),
selectInput("seqID", "Choose seq.ID:", choices = NULL, selected = "ALL", multiple = TRUE),
radioButtons("abundanceType", "Abundance Type:", choices = c("Absolute", "Relative"), selected = "Absolute"),
textInput("seqIDPattern", "Seq.ID Pattern:", value = ""),
plotlyOutput("plotUI")
)
server <- function(input, output, session) {
shinyDir <- reactiveVal()
folder_data <- reactiveVal()
observe({
shinyDirChoose(input, 'dir', roots=c(wd='.'), session=session)
if (!is.null(input$dir)) {
shinyDir(parseDirPath(c(wd='.'), input$dir))
folder_path <- shinyDir()
plot_data <- extract_seqs_long(folder=folder_path, type="relative", clade="C")
updateSelectInput(session, "seqID", choices = c("ALL", unique(plot_data$seq.ID)))
colour.seqs <- extract_plot_colors(folder_path)
its2.type.names <- extract_its2_names(folder_path)
folder_data(list(plot_data = plot_data, colour_seqs = colour.seqs, its2_type_names = its2.type.names))
}
})
output$plotUI <- renderPlotly({
# Your plotting code here, the same as in the flexdashboard example
})
}
shinyApp(ui = ui, server = server)
library(shiny)
library(shinyFiles)
library(symportalfunctions)
library(tidyverse)
library(ggplot2)
library(plotly)
ui <- fluidPage(
shinyDirButton("dir", "Select Data Folder", "Please select a folder", FALSE),
selectInput("seqID", "Choose seq.ID:", choices = NULL, selected = "ALL", multiple = TRUE),
radioButtons("abundanceType", "Abundance Type:", choices = c("Absolute", "Relative"), selected = "Absolute"),
textInput("seqIDPattern", "Seq.ID Pattern:", value = ""),
plotlyOutput("plotUI")
)
server <- function(input, output, session) {
shinyDir <- reactiveVal()
folder_data <- reactiveVal()
observe({
shinyDirChoose(input, 'dir', roots=c(wd='.'), session=session)
if (!is.null(input$dir)) {
shinyDir(parseDirPath(c(wd='.'), input$dir))
folder_path <- shinyDir()
plot_data <- extract_seqs_long(folder=folder_path, type="relative", clade="C")
updateSelectInput(session, "seqID", choices = c("ALL", unique(plot_data$seq.ID)))
colour.seqs <- extract_plot_colors(folder_path)
its2.type.names <- extract_its2_names(folder_path)
folder_data(list(plot_data = plot_data, colour_seqs = colour.seqs, its2_type_names = its2.type.names))
}
})
output$plotUI <- renderPlotly({
data_list <- folder_data()
if (is.null(data_list)) return()
plot_data <- data_list$plot_data
colour.seqs <- data_list$colour_seqs
its2.type.names <- data_list$its2_type_names
filtered_data <- plot_data
if ("ALL" %in% input$seqID) {
filtered_data <- plot_data
} else {
filtered_data <- plot_data %>% filter(seq.ID %in% input$seqID)
}
if (nchar(input$seqIDPattern) > 0) {
pattern_filtered_data <- plot_data %>% filter(grepl(input$seqIDPattern, seq.ID))
filtered_data <- dplyr::bind_rows(filtered_data, pattern_filtered_data)
}
p <- ggplot() + theme_bw()
if (input$abundanceType == "Relative") {
p <- p + geom_bar(data=filtered_data, aes(fill=seq.ID, y=abundance, x=sample.ID), color="black", linewidth=0.1,
position = position_fill(reverse = TRUE), show.legend=FALSE, stat="identity")
} else {
p <- p + geom_bar(data=filtered_data, aes(fill=seq.ID, y=abundance, x=sample.ID), color="black", linewidth=0.1,
show.legend=FALSE, stat="identity")
}
p <- p + theme(legend.position = "bottom", axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
scale_fill_manual(values = colour.seqs) +
geom_text(data=its2.type.names, aes(x=sample_name, y=ifelse(input$abundanceType == "Relative", 1.5, max(filtered_data$abundance)), label=UID), size=2, angle=90)
ggplotly(p)
})
}
shinyApp(ui = ui, server = server)
tmp
