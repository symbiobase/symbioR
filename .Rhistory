keep <- read.delim(paste0(folder, "/", file_list)) %>%
dplyr::select(sample_name, 40:ncol(.)) %>% # select just the symbiodinium columns
dplyr::slice(-dplyr::n()) %>% # remove the last row, summary data
dplyr::select(sample_name, dplyr::matches(clade, ignore.case = FALSE)) %>% # keep only columns matching "clade"
dplyr::filter(dplyr::case_when(drop_samples_match_str == "NA_character_" ~ TRUE, TRUE ~ !str_detect(sample_name, drop_samples_match_str))) %>% # drop by sample name
select(-matches(drop_seqs_match_str))
keep
# get matches with dropped samples:
drop_samples_str <- ifelse(length(drop_samples) == 0, "NA_character_", paste(drop_samples, collapse = "|"))
drop_seqs_str <- ifelse(length(drop_seqs_match) == 0, "NA_character_", paste(drop_seqs, collapse = "|"))
drop_samples = NULL
drop_seqs = NULL
# get matches with dropped samples:
drop_samples_str <- ifelse(length(drop_samples) == 0, "NA_character_", paste(drop_samples, collapse = "|"))
drop_seqs_str <- ifelse(length(drop_seqs_match) == 0, "NA_character_", paste(drop_seqs, collapse = "|"))
# read files
file_list <- list.files(path = folder, pattern = "seqs.absolute.abund_and_meta.txt", include.dirs = TRUE, recursive = TRUE)
row.names(keep <- read.delim(paste0(folder, "/", file_list)))
keep <- read.delim(paste0(folder, "/", file_list)) %>%
dplyr::select(sample_name, 40:ncol(.)) %>% # select just the symbiodinium columns
dplyr::slice(-dplyr::n()) %>% # remove the last row, summary data
dplyr::select(sample_name, dplyr::matches(clade, ignore.case = FALSE)) %>% # keep only columns matching "clade"
dplyr::filter(dplyr::case_when(drop_samples_str == "NA_character_" ~ TRUE, TRUE ~ !str_detect(sample_name, drop_samples_str))) %>% # drop rows by sample name
select(-matches(drop_seqs_str)) # drop columns by seq name
drop_seqs_str <- ifelse(length(drop_seqs_match) == 0, "NA_character_", paste(drop_seqs, collapse = "|"))
drop_seqs_str
drop_seqs_str <- ifelse(length(drop_seqs_match) == 0, "NA_character_", paste(drop_seqs, collapse = "|"))
# get matches with dropped samples:
drop_samples_str <- ifelse(length(drop_samples) == 0, "NA_character_", paste(drop_samples, collapse = "|"))
drop_samples_str
drop_seqs_str
drop_seqs_str <- ifelse(length(drop_seqs) == 0, "NA_character_", paste(drop_seqs, collapse = "|"))
drop_seqs_str
# get matches with dropped samples:
drop_samples_str <- ifelse(length(drop_samples) == 0, "NA_character_", paste(drop_samples, collapse = "|"))
drop_seqs_str <- ifelse(length(drop_seqs) == 0, "NA_character_", paste(drop_seqs, collapse = "|"))
keep <- read.delim(paste0(folder, "/", file_list)) %>%
dplyr::select(sample_name, 40:ncol(.)) %>% # select just the symbiodinium columns
dplyr::slice(-dplyr::n()) %>% # remove the last row, summary data
dplyr::select(sample_name, dplyr::matches(clade, ignore.case = FALSE)) %>% # keep only columns matching "clade"
dplyr::filter(dplyr::case_when(drop_samples_str == "NA_character_" ~ TRUE, TRUE ~ !str_detect(sample_name, drop_samples_str))) %>% # drop rows by sample name
dplyr::select(-matches(drop_seqs_str)) # drop columns by seq name
keep
excluded_samples <- row.names(keep <- read.delim(paste0(folder, "/", file_list))$sample_names)
excluded_samples
full_data <- row.names(keep <- read.delim(paste0(folder, "/", file_list))
keep <- full_data%>%
full_data <- row.names(keep <- read.delim(paste0(folder, "/", file_list))
full_data <- row.names(keep <- read.delim(paste0(folder, "/", file_list)))
full_data <- read.delim(paste0(folder, "/", file_list)))
full_data <- read.delim(paste0(folder, "/", file_list))
full_data
keep <- full_data %>%
dplyr::select(sample_name, 40:ncol(.)) %>% # select just the symbiodinium columns
dplyr::slice(-dplyr::n()) %>% # remove the last row, summary data
dplyr::select(sample_name, dplyr::matches(clade, ignore.case = FALSE)) %>% # keep only columns matching "clade"
dplyr::filter(dplyr::case_when(drop_samples_str == "NA_character_" ~ TRUE, TRUE ~ !str_detect(sample_name, drop_samples_str))) %>% # drop rows by sample name
dplyr::select(-matches(drop_seqs_str)) # drop columns by seq name
keep <- full_data %>%
dplyr::select(sample_name, 40:ncol(.)) %>% # select just the symbiodinium columns
dplyr::slice(-dplyr::n()) %>% # remove the last row, summary data
dplyr::select(sample_name, dplyr::matches(clade, ignore.case = FALSE)) %>% # keep only columns matching "clade"
dplyr::filter(dplyr::case_when(drop_samples_str == "NA_character_" ~ TRUE, TRUE ~ !str_detect(sample_name, drop_samples_str))) %>% # drop rows by sample name
dplyr::select(-matches(drop_seqs_str)) %>% # drop columns by seq name
dplyr::filter(rowSums(dplyr::select(., dplyr::where(is.numeric))) > as.numeric(threshold)) %>%  # remove samples where <1000 sequences
tibble::column_to_rownames("sample_name") %>% # sample_name column to rowname
dplyr::filter(rowSums(dplyr::select(., dplyr::where(is.numeric))) != 0) %>% # drop zero sum rows
dplyr::select(dplyr::where(~ sum(. != 0) > 0)) %>% # drop zero sum columns
dplyr::select(dplyr::where(~ any(!is.na(.))))  # drop blank columns
excluded_samples <- row.names(keep)
excluded_samples
row.names(keep) %in% full_data
row.names(keep) %in% full_data$sample_name
excluded_samples <- !row.names(keep) %in% full_data$sample_name
excluded_samples
excluded_samples <- !full_data$sample_name %in% row.names(keep)
excluded_samples
excluded_samples <- !full_data$sample_name %in% row.names(keep)
excluded_samples
excluded_sample_names <- full_data$sample_name[excluded_samples]
excluded_sample_names
full_data <- read.delim(paste0(folder, "/", file_list)) %>%
dplyr::select(sample_name, 40:ncol(.)) %>% # select just the symbiodinium columns
dplyr::slice(-dplyr::n()) %>% # remove the last row, summary data
keep <- full_data %>%
dplyr::select(sample_name, dplyr::matches(clade, ignore.case = FALSE)) %>% # keep only columns matching "clade"
dplyr::filter(dplyr::case_when(drop_samples_str == "NA_character_" ~ TRUE, TRUE ~ !str_detect(sample_name, drop_samples_str))) %>% # drop rows by sample name
dplyr::select(-matches(drop_seqs_str)) %>% # drop columns by seq name
dplyr::filter(rowSums(dplyr::select(., dplyr::where(is.numeric))) > as.numeric(threshold)) %>%  # remove samples where <1000 sequences
tibble::column_to_rownames("sample_name") %>% # sample_name column to rowname
dplyr::filter(rowSums(dplyr::select(., dplyr::where(is.numeric))) != 0) %>% # drop zero sum rows
dplyr::select(dplyr::where(~ sum(. != 0) > 0)) %>% # drop zero sum columns
dplyr::select(dplyr::where(~ any(!is.na(.))))  # drop blank columns
full_data <- read.delim(paste0(folder, "/", file_list)) %>%
dplyr::select(sample_name, 40:ncol(.)) %>% # select just the symbiodinium columns
dplyr::slice(-dplyr::n())  # remove the last row, summary data
keep <- full_data %>%
dplyr::select(sample_name, dplyr::matches(clade, ignore.case = FALSE)) %>% # keep only columns matching "clade"
dplyr::filter(dplyr::case_when(drop_samples_str == "NA_character_" ~ TRUE, TRUE ~ !str_detect(sample_name, drop_samples_str))) %>% # drop rows by sample name
dplyr::select(-matches(drop_seqs_str)) %>% # drop columns by seq name
dplyr::filter(rowSums(dplyr::select(., dplyr::where(is.numeric))) > as.numeric(threshold)) %>%  # remove samples where <1000 sequences
tibble::column_to_rownames("sample_name") %>% # sample_name column to rowname
dplyr::filter(rowSums(dplyr::select(., dplyr::where(is.numeric))) != 0) %>% # drop zero sum rows
dplyr::select(dplyr::where(~ sum(. != 0) > 0)) %>% # drop zero sum columns
dplyr::select(dplyr::where(~ any(!is.na(.))))  # drop blank columns
excluded_samples <- !full_data$sample_name %in% row.names(keep)
excluded_sample_names <- full_data$sample_name[excluded_samples]
excluded_sample_names
abundance <- full_data %>%
dplyr::select(sample_name, dplyr::matches(clade, ignore.case = FALSE)) %>% # keep only columns matching "clade"
dplyr::filter(dplyr::case_when(drop_samples_str == "NA_character_" ~ TRUE, TRUE ~ !str_detect(sample_name, drop_samples_str))) %>% # drop rows by sample name
dplyr::select(-matches(drop_seqs_str)) %>% # drop columns by seq name
dplyr::filter(rowSums(dplyr::select(., dplyr::where(is.numeric))) > as.numeric(threshold)) %>%  # remove samples where <1000 sequences
tibble::column_to_rownames("sample_name") %>% # sample_name column to rowname
dplyr::filter(rowSums(dplyr::select(., dplyr::where(is.numeric))) != 0) %>% # drop zero sum rows
dplyr::select(dplyr::where(~ sum(. != 0) > 0)) %>% # drop zero sum columns
dplyr::select(dplyr::where(~ any(!is.na(.))))  # drop blank columns
relative <- abundance |>
dplyr::mutate(row_sum = rowSums(dplyr::select(., dplyr::where(is.numeric)))) %>%
dplyr::mutate(dplyr::across(dplyr::where(is.numeric), ~ . / row_sum)) %>%
dplyr::select(-row_sum)
relative <- abundance |>
dplyr::mutate(row_sum = rowSums(dplyr::select(., dplyr::where(is.numeric)))) %>%
dplyr::mutate(dplyr::across(dplyr::where(is.numeric), ~ . / row_sum)) %>%
dplyr::select(-row_sum)
relative <- abundance |>
dplyr::mutate(row_sum = rowSums(dplyr::select(., dplyr::where(is.numeric))))
abundance
relative <- abundance |>
dplyr::mutate(row_sum = rowSums())
relative <- abundance |>
dplyr::mutate(row_sum = rowSums(select(everything)))
relative <- abundance %>%
dplyr::mutate(row_sum = rowSums(dplyr::select(., dplyr::where(is.numeric)))) %>%
dplyr::mutate(dplyr::across(dplyr::where(is.numeric), ~ . / row_sum)) %>%
dplyr::select(-row_sum)
relative
rowSums(relative)
colSums(relative)
relative %>%
mutate(row_sum = rowSums(select_if(., is.numeric))) %>%
{if(any(.$row_sum != 1)) stop("Row sums are not all equal to 1.") else .}
relative <- abundance %>%
dplyr::mutate(row_sum = rowSums(dplyr::select(., dplyr::where(is.numeric)))) %>%
dplyr::mutate(dplyr::across(dplyr::where(is.numeric), ~ . / row_sum)) %>%
dplyr::select(-row_sum)
rowSums(relative)
relative %>%
mutate(row_sum = rowSums(select_if(., is.numeric))) %>%
{if(any(.$row_sum != 1)) stop("Row sums are not all equal to 1.") else .}
if(any(relative$row_sum != 1)){ stop("Row sums are not all equal to 1.") }
relative <- abundance %>%
dplyr::mutate(row_sum = rowSums(dplyr::select(., dplyr::where(is.numeric)))) %>%
dplyr::mutate(dplyr::across(dplyr::where(is.numeric), ~ . / row_sum)+0.1) %>%
dplyr::select(-row_sum)
if(any(relative$row_sum != 1)){ stop("Row sums are not all equal to 1.") }
any(relative$row_sum != 1))
any(relative$row_sum != 1)
any(relative$row_sum != 1)
(relative$row_sum != 1)
extract_seqs <- function(folder, type = "relative", clade = LETTERS[1:10], threshold=1000, drop_samples = NULL, drop_seqs = NULL, silent=TRUE) {
# get matches with dropped samples:
drop_samples_str <- ifelse(length(drop_samples) == 0, "NA_character_", paste(drop_samples, collapse = "|"))
drop_seqs_str <- ifelse(length(drop_seqs) == 0, "NA_character_", paste(drop_seqs, collapse = "|"))
# read files
file_list <- list.files(path = folder, pattern = "seqs.absolute.abund_and_meta.txt", include.dirs = TRUE, recursive = TRUE)
full_data <- read.delim(paste0(folder, "/", file_list)) %>%
dplyr::select(sample_name, 40:ncol(.)) %>% # select just the symbiodinium columns
dplyr::slice(-dplyr::n())  # remove the last row, summary data
abundance <- full_data %>%
dplyr::select(sample_name, dplyr::matches(clade, ignore.case = FALSE)) %>% # keep only columns matching "clade"
dplyr::filter(dplyr::case_when(drop_samples_str == "NA_character_" ~ TRUE, TRUE ~ !str_detect(sample_name, drop_samples_str))) %>% # drop rows by sample name
dplyr::select(-matches(drop_seqs_str)) %>% # drop columns by seq name
dplyr::filter(rowSums(dplyr::select(., dplyr::where(is.numeric))) > as.numeric(threshold)) %>%  # remove samples where <1000 sequences
tibble::column_to_rownames("sample_name") %>% # sample_name column to rowname
dplyr::filter(rowSums(dplyr::select(., dplyr::where(is.numeric))) != 0) %>% # drop zero sum rows
dplyr::select(dplyr::where(~ sum(. != 0) > 0)) %>% # drop zero sum columns
dplyr::select(dplyr::where(~ any(!is.na(.))))  # drop blank columns
excluded_samples <- !full_data$sample_name %in% row.names(abundance)
excluded_sample_names <- full_data$sample_name[excluded_samples]
if (silent==FALSE){
cat("Excluded samples \n")
cat(paste0(" - ", excluded_sample_names, collapse="\n"), " \n")
}
relative <- abundance %>%
dplyr::mutate(row_sum = rowSums(dplyr::select(., dplyr::where(is.numeric)))) %>%
dplyr::mutate(dplyr::across(dplyr::where(is.numeric), ~ . / row_sum)+0.1) %>%
dplyr::select(-row_sum)
if(any(relative$row_sum != 1)){ stop("Row sums are not all equal to 1.")} #add check and stop code if not all rows = 1
if (type == "absolute") {
return(absolute)
} else if (type == "relative") {
return(relative)
}
}
document()
rm(list = c("extract_seqs"))
tmp <- extract_seqs(folder="/Users/rof011/symbiodinium/20220919T102058_esampayo", type="absolute")
document()
extract_seqs(folder="/Users/rof011/symbiodinium/20220919T102058_esampayo", type="absolute")
extract_seqs(folder="/Users/rof011/symbiodinium/20220919T102058_esampayo", type="absolute", drop_samples = "OT")
extract_seqs(folder="/Users/rof011/symbiodinium/20220919T102058_esampayo", type="absolute", drop_samples = c("OT", "H18")
)
extract_seqs(folder="/Users/rof011/symbiodinium/20220919T102058_esampayo", type="absolute", drop_samples = c("OT", "H18"), silent=FALSE)
tmp <- extract_seqs(folder="/Users/rof011/symbiodinium/20220919T102058_esampayo", type="absolute", drop_samples = c("OT", "H18"), silent=FALSE)
extract_seqs(folder="/Users/rof011/symbiodinium/20220919T102058_esampayo", type="absolute", drop_samples = c("OT", "H18"), silent=FALSE)
extract_seqs(folder="/Users/rof011/symbiodinium/20220919T102058_esampayo", type="absolute", drop_samples = c("OT", "H18"), drop_seqs=c("X"), silent=FALSE)
extract_seqs(folder="/Users/rof011/symbiodinium/20220919T102058_esampayo", type="absolute", drop_samples = c("OT", "H18"), drop_seqs=c("x"), silent=FALSE)
document()
document()
load_all
load_all()
extract_seqs(folder="/Users/rof011/symbiodinium/20220919T102058_esampayo", type="absolute", drop_samples = c("OT", "H18"), drop_seqs=c("x"), silent=FALSE)
extract_seqs(folder="/Users/rof011/symbiodinium/20220919T102058_esampayo", type="absolute", drop_samples = c("OT", "H18"), drop_seqs=c("X"), silent=FALSE)
?drop_samples_str
drop_samples_str
extract_seqs(folder="/Users/rof011/symbiodinium/20220919T102058_esampayo", type="absolute", drop_samples = c("OT", "H18"), drop_seqs=c("X"), silent=FALSE)
traceback(*)
traceback()
extract_seqs(folder="/Users/rof011/symbiodinium/20220919T102058_esampayo", type="absolute", drop_samples = c("OT", "H18"), drop_seqs=c("X"), silent=FALSE)
traceback()
# get matches with dropped samples:
drop_samples_str <- ifelse(length(drop_samples) == 0, "NA_character_", paste(drop_samples, collapse = "|"))
drop_seqs_str <- ifelse(length(drop_seqs) == 0, "NA_character_", paste(drop_seqs, collapse = "|"))
# read files
file_list <- list.files(path = folder, pattern = "seqs.absolute.abund_and_meta.txt", include.dirs = TRUE, recursive = TRUE)
full_data <- read.delim(paste0(folder, "/", file_list)) %>%
dplyr::select(sample_name, 40:ncol(.)) %>% # select just the symbiodinium columns
dplyr::slice(-dplyr::n())  # remove the last row, summary data
absolute <- full_data %>%
dplyr::select(sample_name, dplyr::matches(clade, ignore.case = FALSE)) %>% # keep only columns matching "clade"
dplyr::filter(dplyr::case_when(drop_samples_str == "NA_character_" ~ TRUE,   # drop rows by sample name
TRUE ~ !stringi::stri_detect_regex(sample_name, drop_samples_str, opts_regex = stringi::stri_opts_regex(case_insensitive = FALSE)))) %>%
dplyr::select(-matches(drop_seqs_str, ignore.case = FALSE)) # drop columns by seq name
document()
load_all()
extract_seqs(folder="/Users/rof011/symbiodinium/20220919T102058_esampayo", type="absolute", drop_samples = c("OT", "H18"), drop_seqs=c("X"), silent=FALSE)
extract_seqs(folder="/Users/rof011/symbiodinium/20220919T102058_esampayo", type="absolute", drop_samples = c("OT", "H18", "G"), drop_seqs=c("X"), silent=FALSE)
extract_seqs(folder="/Users/rof011/symbiodinium/20220919T102058_esampayo", type="absolute", drop_samples = c("OT", "H18"), drop_seqs=c("X", "G"), silent=FALSE)
extract_seqs(folder="/Users/rof011/symbiodinium/20220919T102058_esampayo", type="relative", drop_samples = c("OT", "H18"), drop_seqs=c("X", "G"), silent=FALSE)
relative <- absolute %>%
dplyr::mutate(row_sum = rowSums(dplyr::select(., dplyr::where(is.numeric)))) %>%
dplyr::mutate(dplyr::across(dplyr::where(is.numeric), ~ . / row_sum)) %>%
dplyr::select(-row_sum)
rowSums(relative)
relative <- absolute %>%
dplyr::mutate(row_sum = rowSums(dplyr::select(., dplyr::where(is.numeric)))) %>%
dplyr::mutate(dplyr::across(dplyr::where(is.numeric), ~ . / row_sum)) %>%
dplyr::select(-row_sum)
rowSums(relative)
rowSums(dplyr::select(., dplyr::where(is.numeric)))
rowSums(dplyr::select(relative, dplyr::where(is.numeric)))
tmp <- extract_seqs(folder="/Users/rof011/symbiodinium/20220919T102058_esampayo", type="relative", drop_samples = c("OT", "H18"), drop_seqs=c("X", "G"), silent=FALSE)
rowSums(tmp)
tmp
document()
load_all()
tmp <- extract_seqs(folder="/Users/rof011/symbiodinium/20220919T102058_esampayo", type="relative", drop_samples = c("OT", "H18"), drop_seqs=c("X", "G"), silent=FALSE)
rowSums(tmp)
mean(rowSums(tmp)/1)
tmp <- extract_seqs(folder="/Users/rof011/symbiodinium/20220919T102058_esampayo", type="relative", drop_samples = c("OT", "H18"), drop_seqs=c("X", "G"), silent=FALSE)
tmp <- extract_seqs(folder="/Users/rof011/symbiodinium/20220919T102058_esampayo", type="relative", drop_samples = c("OT", "H18"), drop_seqs=c("X", "G"), silent=FALSE)
# get matches with dropped samples:
drop_samples_str <- ifelse(length(drop_samples) == 0, "NA_character_", paste(drop_samples, collapse = "|"))
drop_seqs_str <- ifelse(length(drop_seqs) == 0, "NA_character_", paste(drop_seqs, collapse = "|"))
# read files
file_list <- list.files(path = folder, pattern = "seqs.absolute.abund_and_meta.txt", include.dirs = TRUE, recursive = TRUE)
full_data <- read.delim(paste0(folder, "/", file_list)) %>%
dplyr::select(sample_name, 40:ncol(.)) %>% # select just the symbiodinium columns
dplyr::slice(-dplyr::n())  # remove the last row, summary data
absolute <- full_data %>%
dplyr::select(sample_name, dplyr::matches(clade, ignore.case = FALSE)) %>% # keep only columns matching "clade"
dplyr::filter(dplyr::case_when(drop_samples_str == "NA_character_" ~ TRUE,   # drop rows by sample name
TRUE ~ !stringi::stri_detect_regex(sample_name, drop_samples_str, opts_regex = stringi::stri_opts_regex(case_insensitive = FALSE)))) %>%
dplyr::select(-matches(drop_seqs_str, ignore.case = FALSE)) %>% # drop columns by seq name
#dplyr::filter(dplyr::case_when(drop_samples_str == "NA_character_" ~ TRUE, TRUE ~ !str_detect(sample_name, drop_samples_str))) %>% # drop rows by sample name
#dplyr::select(-matches(drop_seqs_str)) %>% # drop columns by seq name
dplyr::filter(rowSums(dplyr::select(., dplyr::where(is.numeric))) > as.numeric(threshold)) %>%  # remove samples where <1000 sequences
tibble::column_to_rownames("sample_name") %>% # sample_name column to rowname
dplyr::filter(rowSums(dplyr::select(., dplyr::where(is.numeric))) != 0) %>% # drop zero sum rows
dplyr::select(dplyr::where(~ sum(. != 0) > 0)) %>% # drop zero sum columns
dplyr::select(dplyr::where(~ any(!is.na(.))))  # drop blank columns
excluded_samples <- !full_data$sample_name %in% row.names(absolute)
excluded_sample_names <- full_data$sample_name[excluded_samples]
if (silent==FALSE){
cat("Excluded samples \n")
cat(paste0(" - ", excluded_sample_names, collapse="\n"), " \n")
}
# get matches with dropped samples:
drop_samples_str <- ifelse(length(drop_samples) == 0, "NA_character_", paste(drop_samples, collapse = "|"))
drop_seqs_str <- ifelse(length(drop_seqs) == 0, "NA_character_", paste(drop_seqs, collapse = "|"))
# read files
file_list <- list.files(path = folder, pattern = "seqs.absolute.abund_and_meta.txt", include.dirs = TRUE, recursive = TRUE)
full_data <- read.delim(paste0(folder, "/", file_list)) %>%
dplyr::select(sample_name, 40:ncol(.)) %>% # select just the symbiodinium columns
dplyr::slice(-dplyr::n())  # remove the last row, summary data
absolute <- full_data %>%
dplyr::select(sample_name, dplyr::matches(clade, ignore.case = FALSE)) %>% # keep only columns matching "clade"
dplyr::filter(dplyr::case_when(drop_samples_str == "NA_character_" ~ TRUE,   # drop rows by sample name
TRUE ~ !stringi::stri_detect_regex(sample_name, drop_samples_str, opts_regex = stringi::stri_opts_regex(case_insensitive = FALSE)))) %>%
dplyr::select(-matches(drop_seqs_str, ignore.case = FALSE)) %>% # drop columns by seq name
#dplyr::filter(dplyr::case_when(drop_samples_str == "NA_character_" ~ TRUE, TRUE ~ !str_detect(sample_name, drop_samples_str))) %>% # drop rows by sample name
#dplyr::select(-matches(drop_seqs_str)) %>% # drop columns by seq name
dplyr::filter(rowSums(dplyr::select(., dplyr::where(is.numeric))) > as.numeric(threshold)) %>%  # remove samples where <1000 sequences
tibble::column_to_rownames("sample_name") %>% # sample_name column to rowname
dplyr::filter(rowSums(dplyr::select(., dplyr::where(is.numeric))) != 0) %>% # drop zero sum rows
dplyr::select(dplyr::where(~ sum(. != 0) > 0)) %>% # drop zero sum columns
dplyr::select(dplyr::where(~ any(!is.na(.))))  # drop blank columns
excluded_samples <- !full_data$sample_name %in% row.names(absolute)
excluded_sample_names <- full_data$sample_name[excluded_samples]
if (silent==FALSE){
cat("Excluded samples \n")
cat(paste0(" - ", excluded_sample_names, collapse="\n"), " \n")
}
silent=FALSE
# get matches with dropped samples:
drop_samples_str <- ifelse(length(drop_samples) == 0, "NA_character_", paste(drop_samples, collapse = "|"))
drop_seqs_str <- ifelse(length(drop_seqs) == 0, "NA_character_", paste(drop_seqs, collapse = "|"))
# read files
file_list <- list.files(path = folder, pattern = "seqs.absolute.abund_and_meta.txt", include.dirs = TRUE, recursive = TRUE)
full_data <- read.delim(paste0(folder, "/", file_list)) %>%
dplyr::select(sample_name, 40:ncol(.)) %>% # select just the symbiodinium columns
dplyr::slice(-dplyr::n())  # remove the last row, summary data
absolute <- full_data %>%
dplyr::select(sample_name, dplyr::matches(clade, ignore.case = FALSE)) %>% # keep only columns matching "clade"
dplyr::filter(dplyr::case_when(drop_samples_str == "NA_character_" ~ TRUE,   # drop rows by sample name
TRUE ~ !stringi::stri_detect_regex(sample_name, drop_samples_str, opts_regex = stringi::stri_opts_regex(case_insensitive = FALSE)))) %>%
dplyr::select(-matches(drop_seqs_str, ignore.case = FALSE)) %>% # drop columns by seq name
#dplyr::filter(dplyr::case_when(drop_samples_str == "NA_character_" ~ TRUE, TRUE ~ !str_detect(sample_name, drop_samples_str))) %>% # drop rows by sample name
#dplyr::select(-matches(drop_seqs_str)) %>% # drop columns by seq name
dplyr::filter(rowSums(dplyr::select(., dplyr::where(is.numeric))) > as.numeric(threshold)) %>%  # remove samples where <1000 sequences
tibble::column_to_rownames("sample_name") %>% # sample_name column to rowname
dplyr::filter(rowSums(dplyr::select(., dplyr::where(is.numeric))) != 0) %>% # drop zero sum rows
dplyr::select(dplyr::where(~ sum(. != 0) > 0)) %>% # drop zero sum columns
dplyr::select(dplyr::where(~ any(!is.na(.))))  # drop blank columns
excluded_samples <- !full_data$sample_name %in% row.names(absolute)
excluded_sample_names <- full_data$sample_name[excluded_samples]
if (silent==FALSE){
cat("Excluded samples \n")
cat(paste0(" - ", excluded_sample_names, collapse="\n"), " \n")
}
relative <- absolute %>%
dplyr::mutate(row_sum = rowSums(dplyr::select(., dplyr::where(is.numeric)))) %>%
dplyr::mutate(dplyr::across(dplyr::where(is.numeric), ~ . / row_sum)+0.1) %>%
dplyr::select(-row_sum)
if(mean(rowSums(tmp)/1) != 1) {
stop("Mean of row sums is not equal to 1.")
}
tmp <- extract_seqs(folder="/Users/rof011/symbiodinium/20220919T102058_esampayo", type="relative", drop_samples = c("OT", "H18"), drop_seqs=c("X", "G"), silent=FALSE)
# get matches with dropped samples:
drop_samples_str <- ifelse(length(drop_samples) == 0, "NA_character_", paste(drop_samples, collapse = "|"))
drop_seqs_str <- ifelse(length(drop_seqs) == 0, "NA_character_", paste(drop_seqs, collapse = "|"))
# read files
file_list <- list.files(path = folder, pattern = "seqs.absolute.abund_and_meta.txt", include.dirs = TRUE, recursive = TRUE)
full_data <- read.delim(paste0(folder, "/", file_list)) %>%
dplyr::select(sample_name, 40:ncol(.)) %>% # select just the symbiodinium columns
dplyr::slice(-dplyr::n())  # remove the last row, summary data
absolute <- full_data %>%
dplyr::select(sample_name, dplyr::matches(clade, ignore.case = FALSE)) %>% # keep only columns matching "clade"
dplyr::filter(dplyr::case_when(drop_samples_str == "NA_character_" ~ TRUE,   # drop rows by sample name
TRUE ~ !stringi::stri_detect_regex(sample_name, drop_samples_str, opts_regex = stringi::stri_opts_regex(case_insensitive = FALSE)))) %>%
dplyr::select(-matches(drop_seqs_str, ignore.case = FALSE)) %>% # drop columns by seq name
#dplyr::filter(dplyr::case_when(drop_samples_str == "NA_character_" ~ TRUE, TRUE ~ !str_detect(sample_name, drop_samples_str))) %>% # drop rows by sample name
#dplyr::select(-matches(drop_seqs_str)) %>% # drop columns by seq name
dplyr::filter(rowSums(dplyr::select(., dplyr::where(is.numeric))) > as.numeric(threshold)) %>%  # remove samples where <1000 sequences
tibble::column_to_rownames("sample_name") %>% # sample_name column to rowname
dplyr::filter(rowSums(dplyr::select(., dplyr::where(is.numeric))) != 0) %>% # drop zero sum rows
dplyr::select(dplyr::where(~ sum(. != 0) > 0)) %>% # drop zero sum columns
dplyr::select(dplyr::where(~ any(!is.na(.))))  # drop blank columns
excluded_samples <- !full_data$sample_name %in% row.names(absolute)
excluded_sample_names <- full_data$sample_name[excluded_samples]
if (silent==FALSE){
cat("Excluded samples \n")
cat(paste0(" - ", excluded_sample_names, collapse="\n"), " \n")
}
relative <- absolute %>%
dplyr::mutate(row_sum = rowSums(dplyr::select(., dplyr::where(is.numeric)))) %>%
dplyr::mutate(dplyr::across(dplyr::where(is.numeric), ~ . / row_sum)+0.1) %>%
dplyr::select(-row_sum)
if(mean(rowSums(tmp)/1) != 1) {
stop("Mean of row sums is not equal to 1.")
}
devtools::load_all(".")
tmp <- extract_seqs(folder="/Users/rof011/symbiodinium/20220919T102058_esampayo", type="relative", drop_samples = c("OT", "H18"), drop_seqs=c("X", "G"), silent=FALSE)
devtools::load_all(".")
styler:::set_style_transformers()
styler:::style_selection()
tmp <- extract_seqs(folder="/Users/rof011/symbiodinium/20220919T102058_esampayo", type="relative", drop_samples = c("OT", "H18"), drop_seqs=c("X", "G"), silent=FALSE)
build_site()
build_articles()
library(pkgdown)
build_articles()
check()
tmp <- extract_seqs(folder="/Users/rof011/symbiodinium/20220919T102058_esampayo", type="absolute")
tmp[1:5,1:10] # show first 5 cols, 10 rows
check()
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(tidyverse)
library(ggplot2)
library(devtools)
install("/Users/rof011/symportalfunctions")
library(symportalfunctions)
tmp <- extract_seqs(folder="/Users/rof011/symbiodinium/20220919T102058_esampayo", type="absolute")
build_site()
load_all()
detach("package:symportalfunctions", unload = TRUE)
remove.packages("symportalfunctions")
load_all()
build_site()
devtools::load_all(".")
build_articles()
devtools::load_all(".")
devtools::load_all(".")
build_articles()
tmp <- extract_seqs(folder="/Users/rof011/symbiodinium/20220919T102058_esampayo", type="absolute")
tmp[1:5,1:10] # show first 5 cols, 10 rows
devtools::load_all(".")
build_articles()
file_list
full_data <- read.delim(paste0(folder, "/", file_list)) %>%
dplyr::select(sample_name, 40:ncol(.)) %>% # select just the symbiodinium columns
dplyr::slice(-dplyr::n()) # remove the last row, summary data
full_data
devtools::load_all(".")
build_articles()
check()
?check
check( vignettes = FALSE)
document()
#' @param drop_seqs drop seqs by named vector, e.g. c("X2777817_G", "X2777816_G"), or by one or more partial matches, e.g. c("X2","OT")
#' @param threshold Set threshold to remove samples if less than the threshold (defaults to 1000)
#' @param silent defaults to TRUE, if FALSE then prints a list of removed sample names
#' @export
#' @return A data.frame of seq.ID (columns) and sample.ID (rows) with either relative or absolute abundance of sequences.
#' @examples
#'
#' # tmp <- extract_seqs(folder="/Users/rof011/symbiodinium/20220919T102058_esampayo", type="absolute", clade=c("C", "D"))
#' #
#' # tmp2 <- extract_seqs(folder="/Users/rof011/symbiodinium/20220919T102058_esampayo", type="relative", clade="C", threshold=100)
extract_seqs <- function(folder, type = "relative", clade = LETTERS[1:10], threshold = 1000, drop_samples = NULL, drop_seqs = NULL, silent = TRUE) {
# get matches with dropped samples:
drop_samples_str <- ifelse(length(drop_samples) == 0, "NA_character_", paste(drop_samples, collapse = "|"))
drop_seqs_str <- ifelse(length(drop_seqs) == 0, "NA_character_", paste(drop_seqs, collapse = "|"))
# read files
file_list <- list.files(path = folder, pattern = "seqs.absolute.abund_and_meta.txt", include.dirs = TRUE, recursive = TRUE)
full_data <- read.delim(paste0(folder, "/", file_list)) %>%
dplyr::select(sample_name, 40:ncol(.)) %>% # select just the symbiodinium columns
dplyr::slice(-dplyr::n()) # remove the last row, summary data
absolute <- full_data %>%
dplyr::select(sample_name, dplyr::matches(clade, ignore.case = FALSE)) %>% # keep only columns matching "clade"
dplyr::filter(dplyr::case_when(
drop_samples_str == "NA_character_" ~ TRUE, # drop rows by sample name
TRUE ~ !stringi::stri_detect_regex(sample_name, drop_samples_str, opts_regex = stringi::stri_opts_regex(case_insensitive = FALSE))
)) %>%
dplyr::select(-matches(drop_seqs_str, ignore.case = FALSE)) %>% # drop columns by seq name
# dplyr::filter(dplyr::case_when(drop_samples_str == "NA_character_" ~ TRUE, TRUE ~ !str_detect(sample_name, drop_samples_str))) %>% # drop rows by sample name
# dplyr::select(-matches(drop_seqs_str)) %>% # drop columns by seq name
dplyr::filter(rowSums(dplyr::select(., dplyr::where(is.numeric))) > as.numeric(threshold)) %>% # remove samples where <1000 sequences
tibble::column_to_rownames("sample_name") %>% # sample_name column to rowname
dplyr::filter(rowSums(dplyr::select(., dplyr::where(is.numeric))) != 0) %>% # drop zero sum rows
dplyr::select(dplyr::where(~ sum(. != 0) > 0)) %>% # drop zero sum columns
dplyr::select(dplyr::where(~ any(!is.na(.)))) # drop blank columns
excluded_samples <- !full_data$sample_name %in% row.names(absolute)
excluded_sample_names <- full_data$sample_name[excluded_samples]
if (silent == FALSE) {
cat("Excluded samples \n")
cat(paste0(" - ", excluded_sample_names, collapse = "\n"), " \n")
}
relative <- absolute %>%
dplyr::mutate(row_sum = rowSums(dplyr::select(., dplyr::where(is.numeric)))) %>%
dplyr::mutate(dplyr::across(dplyr::where(is.numeric), ~ . / row_sum)) %>%
dplyr::select(-row_sum)
########################
## add checks:
if (mean(rowSums(relative) / 1) != 1) {
stop("STOP: mean of row sums is not equal to 1.")
}
if (any(colSums(tmp) == 0) || any(is.na(colSums(tmp)))) {
stop("STOP: code error, column sums contain 0 or NA.")
}
########################
# return functions:
if (type == "absolute") {
return(absolute)
} else if (type == "relative") {
return(relative)
}
}
devtools::load_all(".")
rm(list = c("extract_seqs"))
build_articles()
devtools::load_all(".")
build_articles()
devtools::load_all(".")
print(getwd())
tmp <- extract_seqs(folder="/Users/rof011/symbiodinium/20220919T102058_esampayo", type="absolute")
tmp
?normalizePath
normalizePath("/Users/rof011/symbiodinium/20220919T102058_esampayo")
normalizePath("/Users/rof011/symbiodinium/20220919T102058_esampayo")
extract_seqs(folder="Users/rof011/symbiodinium/20220919T102058_esampayo")
normalizePath("~/rof011/symbiodinium/20220919T102058_esampayo")
normalizePath("Users/rof011/symbiodinium/20220919T102058_esampayo")
normalizePath("/Users/rof011/symbiodinium/20220919T102058_esampayo")
source("~/symportalfunctions/R/extract_seqs.R")
devtools::load_all(".")
devtools::load_all(".")
rm(list = c("extract_seqs"))
build_articles()
