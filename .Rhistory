devtools::check(vignettes=FALSE)
devtools::load_all(".")
seqs()
seqs
?seqs()
symportalfunctions::seqs()
document()
devtools::load_all(".")
seqs_viewer()
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
seqs_viewer()
devtools::load_all(".")
seqs_viewer()
devtools::load_all(".")
seqs_viewer()
?ggplotly size
seqs_viewer()
seqs_viewer()
seqs_viewer()
seqs_viewer()
devtools::load_all(".")
seqs_viewer()
devtools::load_all(".")
seqs_viewer()
devtools::load_all(".")
seqs_viewer()
devtools::load_all(".")
seqs_viewer()
?isolate
devtools::load_all(".")
seqs_viewer()
devtools::load_all(".")
seqs_viewer()
devtools::load_all(".")
seqs_viewer()
devtools::load_all(".")
seqs_viewer()
devtools::load_all(".")
seqs_viewer()
devtools::load_all(".")
seqs_viewer()
devtools::load_all(".")
seqs_viewer()
runApp('inst/shiny-examples/seqs-viewer')
devtools::load_all(".")
seqs_viewer()
devtools::load_all(".")
seqs_viewer()
devtools::load_all(".")
seqs_viewer()
devtools::load_all(".")
seqs_viewer()
devtools::load_all(".")
seqs_viewer()
devtools::load_all(".")
seqs_viewer()
devtools::load_all(".")
seqs_viewer()
seqs_viewer()
devtools::load_all(".")
seqs_viewer()
devtools::load_all(".")
seqs_viewer()
devtools::load_all(".")
seqs_viewer()
devtools::load_all(".")
seqs_viewer()
devtools::load_all(".")
seqs_viewer()
devtools::load_all(".")
seqs_viewer()
seqs_viewer()
seqs_viewer()
styler:::style_selection()
devtools::load_all(".")
seqs_viewer()
devtools::load_all(".")
seqs_viewer()
devtools::load_all(".")
seqs_viewer()
devtools::load_all(".")
seqs_viewer()
devtools::load_all(".")
seqs_viewer()
seqs_viewer()
devtools::load_all(".")
seqs_viewer()
devtools::load_all(".")
seqs_viewer()
devtools::load_all(".")
seqs_viewer()
styler:::style_selection()
devtools::load_all(".")
seqs_viewer()
check(vignettes=FALSE)
devtools::check(vignettes=FALSE)
credentials::set_github_pat("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")
rmarkdown::render_page("vignettes/02-code-coralseed-example.Rmd")
pkgdown::render_page("vignettes/02-code-coralseed-example.Rmd")
pkgdown::render_page("coralseed", vignettes/02-code-coralseed-example.Rmd")
)
library(tinselR)
run_app()
library(reticulate)
install.packages("reticulate")
devtools::load_all(".")
seqs_viewer()
check()
devtools::check()
devtools::check(vignettes=FALSE)
devtools::check(vignettes=FALSE)
?install_github
?git_credentials
git_credentials
install.packages(remotes)
install.packages("remotes")
?git_credentials
devtools::load_all(".")
seqs_viewer()
devtools::load_all(".")
seqs_viewer()
devtools::load_all(".")
seqs_viewer()
getwd()
getwd()
seqs_viewer()
install.packages("shinyFiles")
devtools::load_all(".")
seqs_viewer()
devtools::load_all(".")
seqs_viewer()
devtools::load_all(".")
seqs_viewer()
seqs_viewer()
devtools::load_all(".")
seqs_viewer()
devtools::load_all(".")
seqs_viewer()
devtools::load_all(".")
seqs_viewer()
devtools::load_all(".")
seqs_viewer()
devtools::load_all(".")
seqs_viewer()
seqs_viewer()
devtools::load_all(".")
seqs_viewer()
devtools::load_all(".")
seqs_viewer()
devtools::load_all(".")
seqs_viewer()
seqs_viewer()
devtools::load_all(".")
seqs_viewer()
devtools::load_all(".")
seqs_viewer()
shinyFiles::getVolumes()
?getVolumes
devtools::load_all(".")
seqs_viewer()
library(shiny)
library(shinyFiles)
ui <- fluidPage(
shinyFilesButton('folderBtn', label='Choose a folder', title='Please select a folder', multiple=FALSE)
)
server <- function(input, output, session) {
observeEvent(input$folderBtn, {
shinyFileChoose(input, 'folderBtn', roots = c(home = '~'), session=session)
})
}
shinyApp(ui, server)
devtools::load_all(".")
seqs_viewer()
devtools::load_all(".")
seqs_viewer()
volumes <- shinyFiles::getVolumes()
observeEvent(input$folderInput, {
shinyDirChoose(input, 'folderInput', roots = volumes, session=session)
folderinfo <- shinyFiles::parseDir(volumes, input$folderInput)
# Print folderinfo to console for inspection
print(folderinfo)
# Check if folderinfo is a data frame and contains the 'datapath' column
if (is.data.frame(folderinfo) && "datapath" %in% names(folderinfo)) {
new_folder <- as.character(folderinfo$datapath[1])
plot_data_new <- extract_seqs_long(new_folder, type = "absolute")
colour.seqs_new <- extract_plot_colors(new_folder)
its2.type.names_new <- extract_its2_names(new_folder)
data_vals(list(plot_data = plot_data_new, colour.seqs = colour.seqs_new, its2.type.names = its2.type.names_new))
} else {
# Display a notification if there's an issue with folder selection
showNotification("There was an issue with the folder selection. Please try again.", type = "error")
}
})
devtools::load_all(".")
seqs_viewer()
devtools::load_all(".")
seqs_viewer()
devtools::load_all(".")
seqs_viewer()
devtools::load_all(".")
seqs_viewer()
?shinyDirChoose
library(shiny)
library(shinyFiles)
ui <- fluidPage(
shinyDirButton("folderInput", "Choose a directory", "Please select a directory", FALSE)
)
server <- function(input, output, session) {
volumes <- shinyFiles::getVolumes()
observeEvent(input$folderInput, {
shinyFiles::shinyDirChoose(input, 'folderInput', roots = volumes, session=session)
folderinfo <- shinyFiles::parseDirPath(volumes, input$folderInput)
print(folderinfo)
})
}
shinyApp(ui, server)
library(shiny)
library(shinyFiles)
ui <- fluidPage(
shinyDirButton("folderInput", "Choose a directory", "Please select a directory", FALSE)
)
server <- function(input, output, session) {
volumes <- shinyFiles::getVolumes()
observeEvent(input$folderInput, {
shinyFiles::shinyDirChoose(input, 'folderInput', roots = volumes, session=session)
folderinfo <- shinyFiles::parseDirPath(volumes, input$folderInput)
print(folderinfo)
})
}
shinyApp(ui, server)
?shinyDirButton
devtools::load_all(".")
seqs_viewer()
devtools::load_all(".")
seqs_viewer()
devtools::load_all(".")
seqs_viewer()
devtools::load_all(".")
seqs_viewer()
devtools::load_all(".")
seqs_viewer()
devtools::load_all(".")
seqs_viewer()
devtools::load_all(".")
seqs_viewer()
devtools::load_all(".")
seqs_viewer()
seqs_viewer()
shinyApp(ui, server)
ui <- fluidPage(
shinyDirButton("folderInput", "Choose a directory", "Please select a directory", FALSE),
textOutput("selectedFolder")
)
server <- function(input, output, session) {
volumes <- shinyFiles::getVolumes()
observeEvent(input$folderInput, {
folder <- shinyFiles::parseDirPath(volumes, input$folderInput)
if (nrow(folder) > 0) {
folder_path <- as.character(folder$fullpath)
print()
#      output$selectedFolder <- renderText({ folder_path })
} else {
showNotification("There was an issue with the folder selection. Please try again.", type = "error")
}
})
}
shinyApp(ui, server)
ui <- fluidPage(
shinyDirButton("folderInput", "Choose a directory", "Please select a directory", FALSE),
textOutput("selectedFolder")
)
server <- function(input, output, session) {
volumes <- shinyFiles::getVolumes()
observeEvent(input$folderInput, {
folder <- shinyFiles::parseDirPath(volumes, input$folderInput)
if (nrow(folder) > 0) {
folder_path <- as.character(folder$fullpath)
renderText({ folder_path })
} else {
showNotification("There was an issue with the folder selection. Please try again.", type = "error")
}
})
}
shinyApp(ui, server)
ui <- fluidPage(
shinyDirButton("folderInput", "Choose a directory", "Please select a directory", FALSE),
textOutput("selectedFolder")
)
server <- function(input, output, session) {
volumes <- shinyFiles::getVolumes()
observeEvent(input$folderInput, {
folder <- shinyFiles::parseDirPath(volumes, input$folderInput)
if (nrow(folder) > 0) {
folder_path <- as.character(folder$fullpath)
} else {
showNotification("There was an issue with the folder selection. Please try again.", type = "error")
}
})
}
shinyApp(ui, server)
library(shiny)
library(shinyFiles)
ui <- fluidPage(
shinyDirButton('folder', 'Select a folder', 'Please select a folder', FALSE)
)
server <- function(input, output){
volumes = getVolumes() # this makes the directory at the base of your computer.
observe({
shinyDirChoose(input, 'folder', roots=volumes, filetypes=c('', 'txt'))
print(input$folder)
})
}
shinyApp(ui=ui, server=server)
library(shiny)
library(shinyFiles)
ui <- fluidPage(
shinyDirButton('folder', 'Select a folder', 'Please select a folder', FALSE)
)
server <- function(input, output){
volumes = getVolumes()() # this makes the directory at the base of your computer.
observe({
shinyDirChoose(input, 'folder', roots=volumes, filetypes=c('', 'txt'))
print(input$folder)
})
}
shinyApp(ui=ui, server=server)
devtools::load_all(".")
seqs_viewer()
devtools::load_all(".")
seqs_viewer()
seqs_viewer()
devtools::load_all(".")
seqs_viewer()
devtools::load_all(".")
seqs_viewer()
devtools::load_all(".")
seqs_viewer()
devtools::load_all(".")
seqs_viewer()
library(shiny)
library(shinyFiles)
ui <- fluidPage(
shinyDirButton('folder', 'Select a folder', 'Please select a folder', FALSE)
)
server <- function(input, output){
volumes = getVolumes()() # this makes the directory at the base of your computer.
observe({
shinyDirChoose(input, 'folder', roots=volumes, filetypes=c('', 'txt'))
print(input$folder)
})
}
shinyApp(ui=ui, server=server)
devtools::load_all(".")
seqs_viewer()
devtools::load_all(".")
seqs_viewer()
library(shiny)
library(shinyFiles)
ui <- fluidPage(
shinyDirButton('folder', 'Select a folder', 'Please select a folder', FALSE)
)
server <- function(input, output){
volumes = getVolumes()() # this makes the directory at the base of your computer.
observe({
shinyDirChoose(input, 'folder', roots=volumes, filetypes=c('', 'txt'))
print(input$folder)
})
}
shinyApp(ui=ui, server=server)
library(shiny)
library(shinyFiles)
ui <- fluidPage(
shinyDirButton('folder', 'Select a folder', 'Please select a folder', FALSE)
)
server <- function(input, output){
volumes = getVolumes()() # this makes the directory at the base of your computer.
observe({
shinyDirChoose(input, 'folderInput', roots=volumes, filetypes=c('', 'txt'))
# print(input$folder)
fileinfo <- shinyFiles::parseDirPath(getVolumes(), input$folderInput)
# Print fileinfo to console for inspection
print(fileinfo)
})
}
shinyApp(ui=ui, server=server)
library(shiny)
library(shinyFiles)
ui <- fluidPage(
shinyDirButton('folder', 'Select a folder', 'Please select a folder', FALSE)
)
server <- function(input, output){
volumes = getVolumes()() # this makes the directory at the base of your computer.
observe({
shinyDirChoose(input, 'folder', roots=volumes, filetypes=c('', 'txt'))
# print(input$folder)
fileinfo <- shinyFiles::parseDirPath(getVolumes(), input$folderInput)
# Print fileinfo to console for inspection
print(fileinfo)
})
}
shinyApp(ui=ui, server=server)
library(shiny)
library(shinyFiles)
ui <- fluidPage(
shinyDirButton('folder', 'Select a folder', 'Please select a folder', FALSE)
)
server <- function(input, output){
volumes = getVolumes()() # this makes the directory at the base of your computer.
observe({
shinyDirChoose(input, 'folder', roots=volumes, filetypes=c('', 'txt'))
# print(input$folder)
fileinfo <- shinyFiles::parseDirPath(input$folderInput)
# Print fileinfo to console for inspection
print(fileinfo)
})
}
shinyApp(ui=ui, server=server)
?parseDirPath
library(shiny)
library(shinyFiles)
ui <- fluidPage(
shinyDirButton('folder', 'Select a folder', 'Please select a folder', FALSE)
)
server <- function(input, output){
volumes = getVolumes()() # this makes the directory at the base of your computer.
observe({
shinyDirChoose(input, 'folder', roots=volumes, filetypes=c('', 'txt'))
# print(input$folder)
fileinfo <- shinyFiles::parseDirPath(volumes, input$folderInput)
# Print fileinfo to console for inspection
print(fileinfo)
})
}
shinyApp(ui=ui, server=server)
library(shiny)
library(shinyFiles)
ui <- fluidPage(
shinyDirButton('folder', 'Select a folder', 'Please select a folder', FALSE)
)
server <- function(input, output){
volumes = getVolumes()() # this makes the directory at the base of your computer.
observe({
shinyDirChoose(input, 'folder', roots=volumes, filetypes=c('', 'txt'))
# print(input$folder)
fileinfo <- shinyFiles::parseDirPath(volumes, input$folder)
# Print fileinfo to console for inspection
print(fileinfo)
})
}
shinyApp(ui=ui, server=server)
library(shiny)
library(shinyFiles)
ui <- fluidPage(
shinyDirButton('folderInput', 'Select a folder', 'Please select a folder', FALSE)
)
server <- function(input, output){
volumes = getVolumes()() # this makes the directory at the base of your computer.
observe({
shinyDirChoose(input, 'folder', roots=volumes, filetypes=c('', 'txt'))
# print(input$folder)
fileinfo <- shinyFiles::parseDirPath(volumes, folderInput$folder)
# Print fileinfo to console for inspection
print(fileinfo)
})
}
shinyApp(ui=ui, server=server)
library(shiny)
library(shinyFiles)
ui <- fluidPage(
shinyDirButton('folderInput', 'Select a folder', 'Please select a folder', FALSE)
)
server <- function(input, output){
volumes = getVolumes()() # this makes the directory at the base of your computer.
observe({
shinyDirChoose(input, 'folderInput', roots=volumes, filetypes=c('', 'txt'))
# print(input$folder)
fileinfo <- shinyFiles::parseDirPath(volumes, input$folderInput)
# Print fileinfo to console for inspection
print(fileinfo)
})
}
shinyApp(ui=ui, server=server)
devtools::load_all(".")
seqs_viewer()
devtools::load_all(".")
seqs_viewer()
seqs_viewer()
devtools::load_all(".")
seqs_viewer()
devtools::load_all(".")
seqs_viewer()
devtools::load_all(".")
seqs_viewer()
devtools::load_all(".")
seqs_viewer()
devtools::load_all(".")
seqs_viewer()
devtools::load_all(".")
seqs_viewer()
devtools::load_all(".")
seqs_viewer()
devtools::load_all(".")
seqs_viewer()
devtools::load_all(".")
seqs_viewer()
devtools::load_all(".")
seqs_viewer()
devtools::check(vignettes=FALSE)
document()
devtools::document()
