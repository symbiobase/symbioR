mutate_all(funs(str_replace(., "5387", "5387_D"))) %>%
mutate_all(funs(str_replace(., "4453", "4453_C"))) %>%
column_to_rownames(var="sample_name")
samplenumber = c("581", "356", "515", "198", "366")  # change sample numbers here and run code below
plot.seqs <- seqs %>% filter(sample.ID %in% samplenumber)
its2 <- its2.names %>% filter(sample_name %in% samplenumber) # get matching UID for the sample.ID
# plot
ggplot() + theme_bw() +  scale_fill_manual(values = colour.seqs) + xlab("") + ylab("") +
geom_bar(data=plot.seqs, aes(fill=seq.ID, y=abundance, x=sample.ID), color="black", position = position_fill(reverse = TRUE), stat="identity") +
geom_text(data=its2, aes(x=sample_name, y=1.04, label=UID), angle=90) +
theme(legend.position = "right", axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
samplenumber = c("581", "356", "515", "198", "366")  # change sample numbers here and run code below
legendposition="right" # none, bottom, top, left, right
plot.sequences <- read.delim("/Users/rof011/symbiodinium/20210805T112901/post_med_seqs/9_brian-full-data_20210805T112901.seqs.absolute.abund_and_meta.txt", check.names=FALSE) %>% select(2, 38:ncol(.)) %>% pivot_longer(-sample_name, names_to="seqtype") %>%  filter(value > 0)  %>%  filter(sample_name %in% samplenumber)
colour.seqs.subset <- colour.seqs %>% as.data.frame() %>% rownames_to_column() %>% rename(seq=1, colorhtml=2)  %>% filter(seq %in% plot.sequences$seqtype) %>% deframe()
its2.type.names.subset <- its2.type.names %>% filter(sample_name %in% plot.sequences$sample_name) %>% arrange(UID)
create_factor <- function(x, levels = its2.type.names.subset$sample_name){factor(x, levels)}
plot.sequences <- plot.sequences %>% mutate_at("sample_name", create_factor)
ggplot() + theme_bw() + geom_bar(data=plot.sequences, aes(fill=seqtype, y=value, x=sample_name), color="black", position = position_fill(reverse = TRUE), stat="identity") +
theme(legend.position = legendposition, axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) + scale_fill_manual(values = colour.seqs.subset) +
geom_text(data=its2.type.names.subset, aes(x=sample_name, y=1.1, label=UID), angle=90)
metadata <- extract_metadata(sym_folder) # get plot colors from symportal folder, no need to every subsample
devtools::load_all()
library(symportalfunctions)
library(tidyverse)
sym_folder="/Users/rof011/Symbiodinium/20210805T112901" # set the main folder for all functions
seqs <- extract_seqs_long(sym_folder, type="absolute", threshold = 0) # get sequences
its2.seqs <- extract_its2_profile_seqs(sym_folder) # get ITS2 profiles
its2.names <- extract_its2_names(sym_folder) # get ITS2 profile names
colour.seqs <- extract_plot_colors(sym_folder) # get plot colors from symportal folder, no need to every subsample
metadata <- extract_metadata(sym_folder) # get plot colors from symportal folder, no need to every subsample
library(tidyverse)
library(vegan)
library(ape)
library(ggtree)
library(janitor)
library(RJSONIO)
library(data.table)
profiles.import <- read.delim("/Users/rof011/symbiodinium/20210805T112901/its2_type_profiles/9_brian-full-data_20210805T112901.profiles.relative.abund_and_meta.txt", check.names=FALSE, header=F)
its2.type.profile <- profiles.import %>% row_to_names(row_number = 7) %>% rename("sample_name" = 2) %>% select(-1) %>%filter(!sample_name== "")
its2.type.profile <- its2.type.profile %>% pivot_longer(-sample_name) %>% filter(value>0) %>% arrange(sample_name) %>% filter(!sample_name== "") %>% select(-value)
its2.type.profile <- its2.type.profile %>% pivot_wider(names_from=name, values_from=name) %>% unite("strings", 2:65, na.rm = TRUE, sep="=")  %>% separate(strings, paste0("ITS2.profile.",1:5), sep="=")
colour.seqs <- RJSONIO::fromJSON("/Users/rof011/symbiodinium/20210805T112901/html/color_dict_post_med.json")
plot.sequences.names <- read.delim("/Users/rof011/symbiodinium/20210805T112901/post_med_seqs/9_brian-full-data_20210805T112901.seqs.relative.abund_and_meta.txt", check.names=FALSE)
# load data for profile ID
profiles.import <- read.delim("/Users/rof011/symbiodinium/20210805T112901//its2_type_profiles/9_brian-full-data_20210805T112901.profiles.relative.abund_and_meta.txt", check.names=FALSE, header=F)
its2.type.profile <- profiles.import %>% row_to_names(row_number = 7) %>% rename("sample_name" = 2) %>% select(-1) %>%filter(!sample_name== "")
its2.type.profile <- its2.type.profile %>% pivot_longer(-sample_name) %>% filter(value>0) %>% arrange(sample_name) %>% filter(!sample_name== "") %>% select(-value)
its2.type.profile <- its2.type.profile %>% pivot_wider(names_from=name, values_from=name) %>% unite("strings", 2:65, na.rm = TRUE, sep="=")  %>% separate(strings, paste0("ITS2.profile.",1:5), sep="=")
its2.type.names <- profiles.import %>% row_to_names(row_number = 1) %>% rename("sample_name" = 2) %>% select(-1) %>%filter(!sample_name== "")
its2.type.names <- its2.type.names %>% pivot_longer(-sample_name) %>% filter(value>0) %>% arrange(sample_name) %>% filter(!sample_name== "") %>% select(-value)
its2.type.names <- its2.type.names %>% pivot_wider(names_from=name, values_from=name) %>% unite("strings", 2:65, na.rm = TRUE, sep="=")  %>% separate(strings, paste0("ITS2.profile.",1:5), sep="=")
its2.type.names <- its2.type.names %>% unite("UID", 2:6, na.rm = TRUE, sep="*")
# relevel ITS profiles to match seqnames from postmeds. Do this higher up if needed next time o the main profiles.relative.abund_and_meta.txt
splitlist <- bind_cols(its2.type.profile$sample_name,
rbindlist(lapply(strsplit(its2.type.profile$ITS2.profile.1 , split="(-)|(/)", fixed=FALSE), function(x) data.table(t(x))),fill = TRUE),
rbindlist(lapply(strsplit(its2.type.profile$ITS2.profile.2 , split="(-)|(/)", fixed=FALSE), function(x) data.table(t(x))),fill = TRUE),
rbindlist(lapply(strsplit(its2.type.profile$ITS2.profile.3 , split="(-)|(/)", fixed=FALSE), function(x) data.table(t(x))),fill = TRUE),
rbindlist(lapply(strsplit(its2.type.profile$ITS2.profile.4 , split="(-)|(/)", fixed=FALSE), function(x) data.table(t(x))),fill = TRUE),
rbindlist(lapply(strsplit(its2.type.profile$ITS2.profile.5 , split="(-)|(/)", fixed=FALSE), function(x) data.table(t(x))),fill = TRUE)) %>% rename(sample_name=1) %>%
mutate_all(funs(str_replace(., "4624", "4624_C"))) %>%
mutate_all(funs(str_replace(., "5025", "5024_D"))) %>%
mutate_all(funs(str_replace(., "4582", "4582_C"))) %>%
mutate_all(funs(str_replace(., "5223", "5223_D"))) %>%
mutate_all(funs(str_replace(., "5049", "5049_C"))) %>%
mutate_all(funs(str_replace(., "3125(?!_)", "3125_C"))) %>%
mutate_all(funs(str_replace(., "3232", "3232_C"))) %>%
mutate_all(funs(str_replace(., "4626", "4626_C"))) %>%
mutate_all(funs(str_replace(., "4562", "4562_C"))) %>%
mutate_all(funs(str_replace(., "4715", "4715_D"))) %>%
mutate_all(funs(str_replace(., "3428", "3428_C"))) %>%
mutate_all(funs(str_replace(., "3158", "3158_C"))) %>%
mutate_all(funs(str_replace(., "4726", "4726_C"))) %>%
mutate_all(funs(str_replace(., "4561", "4561_C"))) %>%
mutate_all(funs(str_replace(., "3126", "3126_C"))) %>%
mutate_all(funs(str_replace(., "4727", "4727_C"))) %>%
mutate_all(funs(str_replace(., "4563", "4563_C"))) %>%
mutate_all(funs(str_replace(., "4493", "4493_D"))) %>%
mutate_all(funs(str_replace(., "4716", "4716_D"))) %>%
mutate_all(funs(str_replace(., "3134(?!_)", "3134_C"))) %>%
mutate_all(funs(str_replace(., "5033", "5033_D"))) %>%
mutate_all(funs(str_replace(., "5019", "5019_D"))) %>%
mutate_all(funs(str_replace(., "4440", "4440_C"))) %>%
mutate_all(funs(str_replace(., "3149", "3149_C"))) %>%
mutate_all(funs(str_replace(., "5261", "5261_C"))) %>%
mutate_all(funs(str_replace(., "5286", "5286_A"))) %>%
mutate_all(funs(str_replace(., "5386", "5386_D"))) %>%
mutate_all(funs(str_replace(., "4610", "4610_D"))) %>%
mutate_all(funs(str_replace(., "3660", "3660_C"))) %>%
mutate_all(funs(str_replace(., "5531", "5531_A"))) %>%
mutate_all(funs(str_replace(., "4247", "4247_C"))) %>%
mutate_all(funs(str_replace(., "5387", "5387_D"))) %>%
mutate_all(funs(str_replace(., "4453", "4453_C"))) %>%
column_to_rownames(var="sample_name")
samplenumber = c("581", "356", "515", "198", "366")  # change sample numbers here and run code below
plot.seqs <- seqs %>% filter(sample.ID %in% samplenumber)
its2 <- its2.names %>% filter(sample_name %in% samplenumber) # get matching UID for the sample.ID
# plot
ggplot() + theme_bw() +  scale_fill_manual(values = colour.seqs) + xlab("") + ylab("") +
geom_bar(data=plot.seqs, aes(fill=seq.ID, y=abundance, x=sample.ID), color="black", position = position_fill(reverse = TRUE), stat="identity") +
geom_text(data=its2, aes(x=sample_name, y=1.04, label=UID), angle=90) +
theme(legend.position = "right", axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
samplenumber = c("581", "356", "515", "198", "366")  # change sample numbers here and run code below
legendposition="right" # none, bottom, top, left, right
plot.sequences <- read.delim("/Users/rof011/symbiodinium/20210805T112901/post_med_seqs/9_brian-full-data_20210805T112901.seqs.absolute.abund_and_meta.txt", check.names=FALSE) %>% select(2, 38:ncol(.)) %>% pivot_longer(-sample_name, names_to="seqtype") %>%  filter(value > 0)  %>%  filter(sample_name %in% samplenumber)
colour.seqs.subset <- colour.seqs %>% as.data.frame() %>% rownames_to_column() %>% rename(seq=1, colorhtml=2)  %>% filter(seq %in% plot.sequences$seqtype) %>% deframe()
its2.type.names.subset <- its2.type.names %>% filter(sample_name %in% plot.sequences$sample_name) %>% arrange(UID)
create_factor <- function(x, levels = its2.type.names.subset$sample_name){factor(x, levels)}
plot.sequences <- plot.sequences %>% mutate_at("sample_name", create_factor)
ggplot() + theme_bw() + geom_bar(data=plot.sequences, aes(fill=seqtype, y=value, x=sample_name), color="black", position = position_fill(reverse = TRUE), stat="identity") +
theme(legend.position = legendposition, axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) + scale_fill_manual(values = colour.seqs.subset) +
geom_text(data=its2.type.names.subset, aes(x=sample_name, y=1.1, label=UID), angle=90)
samplenumber = c("581", "356", "515", "198", "366")  # change sample numbers here and run code below
plot.seqs <- seqs %>% filter(sample.ID %in% samplenumber) # i) extract sequences and filter
its2.seqs.subset <- its2.seqs %>% filter(sample.ID %in% samplenumber) # ii) extract main ITS and filter
plot.seqs.subset <- plot.seqs %>% filter(seq.ID %in% its2.seqs.subset$seq.ID) # iii) filter the plot sequences to only include the main ITS2 seqs
its2 <- its2.names %>%  filter(sample_name %in% samplenumber) # make Y axis labels
ggplot() + theme_bw() + geom_bar(data=plot.seqs.subset, aes(fill=seq.ID, y=abundance, x=sample.ID), color="black", position = position_fill(reverse = TRUE), stat="identity") +
theme(legend.position = "bottom", axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) + scale_fill_manual(values = colour.seqs) +
geom_text(data=its2, aes(x=sample_name, y=1.1, label=UID), angle=90)
samplenumber = c("581", "356", "515", "198", "366")  # change sample numbers here and run code below
legendposition="bottom" # none, bottom, top, left, right
plot.sequences.samples <- read.delim("/Users/rof011/symbiodinium/20210805T112901/post_med_seqs/9_brian-full-data_20210805T112901.seqs.absolute.abund_and_meta.txt", check.names=FALSE) %>% select(2, 38:ncol(.)) %>% pivot_longer(-sample_name, names_to="seqtype") %>%  filter(value > 0)   %>% filter(sample_name %in% samplenumber)
splitlist.sub <- splitlist %>% filter(rownames(.) %in% plot.sequences.samples$sample_name) %>% pivot_longer(cols = everything()) %>% na.omit() %>% unique()
plot.sequences <- plot.sequences.samples %>% filter(seqtype %in% splitlist.sub$value)
colour.seqs.subset <- colour.seqs %>% as.data.frame() %>% rownames_to_column() %>% rename(seq=1, colorhtml=2)  %>% filter(seq %in% plot.sequences$seqtype) %>% deframe()
its2.type.names.subset <- its2.type.names %>% filter(sample_name %in% plot.sequences$sample_name)
ggplot() + theme_bw() + geom_bar(data=plot.sequences, aes(fill=seqtype, y=value, x=sample_name), color="black", position = position_fill(reverse = TRUE), stat="identity") +
theme(legend.position = legendposition, axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) + scale_fill_manual(values = colour.seqs.subset) +
geom_text(data=its2.type.names.subset, aes(x=sample_name, y=1.1, label=UID), angle=90)
genus = "Seriatopora"
genus_seqs <- metadata |> filter(host_genus==genus) %>% pull(sample_name) %>% as.character()
plot.sequences.genus <- plot.sequences %>% filter(sample.ID %in% genus_seqs)
genus = "Seriatopora"
genus_seqs <- metadata %>% pull(sample_name) %>% as.character()
plot.sequences.genus <- plot.sequences %>% filter(sample.ID %in% genus_seqs)
genus = "Seriatopora"
genus_seqs <- metadata |> filter(host_genus==genus) %>% pull(sample_name) %>% as.character()
plot.sequences.genus <- plot.sequences %>% filter(sample.ID %in% genus_seqs)
genus = "Seriatopora"
genus_seqs <- metadata |> filter(host_genus==genus) %>% pull(sample_name) %>% as.character()
genus_seqs
plot.sequences.genus <- plot.sequences %>% filter(sample.ID %in% genus_seqs)
plot.sequences.genus <- plot.sequences %>% filter(sample_name %in% genus_seqs)
its2 <- its2.names %>% filter(sample_name %in% plot.sequences.genus$sample.ID) # make Y axis labels
ggplot() + theme_bw() + geom_bar(data=plot.sequences.genus, aes(fill=seq.ID, y=abundance, x=sample.ID), color="black", position = position_fill(reverse = TRUE), stat="identity") +
theme(legend.position = "none", axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) + scale_fill_manual(values = colour.seqs)
plot.sequences.genus
plot.sequences
plot.sequences.genus <- seqs %>% filter(sample_name %in% genus_seqs)
plot.sequences.genus <- seqs %>% filter(sample.ID %in% genus_seqs)
plot.sequences.genus
its2 <- its2.names %>% filter(sample_name %in% plot.sequences.genus$sample.ID) # make Y axis labels
its2
ggplot() + theme_bw() + geom_bar(data=plot.sequences.genus, aes(fill=seq.ID, y=abundance, x=sample.ID), color="black", position = position_fill(reverse = TRUE), stat="identity") +
theme(legend.position = "none", axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) + scale_fill_manual(values = colour.seqs)
plot.seqs <- seqs %>% filter(sample.ID %in% genus_seqs) # i) extract sequences and filter
its2.seqs.subset <- its2.seqs %>% filter(sample.ID %in% genus_seqs) # ii) extract main ITS and filter
plot.seqs.subset <- plot.seqs %>% filter(seq.ID %in% splitlist.sub$seq.ID) # iii) filter the plot sequences to only include the main ITS2 seqs
its2 <- its2.names %>% filter(sample_name %in% genus_seqs) # make Y axis labels
ggplot() + theme_bw() + geom_bar(data=plot.sequences.subset, aes(fill=seq.ID, y=abundance, x=sample.ID), color="black", position = position_fill(reverse = TRUE), stat="identity") +
theme(legend.position = "bottom", axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) + scale_fill_manual(values = colour.seqs) +
geom_text(data=its2.type.genus, aes(x=sample_name, y=1.1, label=UID), angle=90)
genus = "Seriatopora"
genus_seqs <- metadata |> filter(host_genus==genus) %>% pull(sample_name) %>% as.character()
plot.sequences.genus <- seqs %>% filter(sample.ID %in% genus_seqs)
its2 <- its2.names %>% filter(sample_name %in% plot.sequences.genus$sample.ID) # make Y axis labels
ggplot() + theme_bw() + geom_bar(data=plot.sequences.genus, aes(fill=seq.ID, y=abundance, x=sample.ID), color="black", position = position_fill(reverse = TRUE), stat="identity") +
theme(legend.position = "none", axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) + scale_fill_manual(values = colour.seqs)
genus = "Seriatopora" # change genus here and run code below
legendposition="none" # none, bottom, top, left, right
#levels(as.factor(plot.sequences.names$host_genus)) # check genera
plot.sequences <- read.delim("/Users/rof011/symbiodinium/20210805T112901/post_med_seqs/9_brian-full-data_20210805T112901.seqs.absolute.abund_and_meta.txt", check.names=FALSE) %>% filter(host_genus==genus) %>% select(2, 38:ncol(.)) %>% pivot_longer(-sample_name, names_to="seqtype") %>%  filter(value > 0)
plot.sequences <- plot.sequences %>% arrange(factor(sample_name, levels = its.order.samples$sample_name))
plot.sequences <- read.delim("/Users/rof011/symbiodinium/20210805T112901/post_med_seqs/9_brian-full-data_20210805T112901.seqs.absolute.abund_and_meta.txt", check.names=FALSE) %>% filter(host_genus==genus) %>% select(2, 38:ncol(.)) %>% pivot_longer(-sample_name, names_to="seqtype") %>%  filter(value > 0)
#plot.sequences <- plot.sequences %>% arrange(factor(sample_name, levels = its.order.samples$sample_name))
colour.seqs.subset <- colour.seqs %>% as.data.frame() %>% rownames_to_column() %>% rename(seq=1, colorhtml=2)  %>% filter(seq %in% plot.sequences$seqtype) %>% deframe()
its2.type.names.subset <- its2.type.names %>% filter(sample_name %in% plot.sequences$sample_name) %>% arrange(UID)
create_factor <- function(x, levels = its2.type.names.subset$sample_name){factor(x, levels)}
plot.sequences <- plot.sequences %>% mutate_at("sample_name", create_factor)
ggplot() + theme_bw() + geom_bar(data=plot.sequences, aes(fill=seqtype, y=value, x=sample_name), color="black", position = position_fill(reverse = TRUE), stat="identity") +
theme(legend.position = legendposition, axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) + scale_fill_manual(values = colour.seqs.subset) +
geom_text(data=its2.type.names.subset, aes(x=sample_name, y=1.1, label=UID), angle=90)
genus = "Seriatopora" # change genus here and run code below
plot.seqs <- seqs %>% filter(sample.ID %in% genus_seqs) # i) extract sequences and filter
its2.seqs.subset <- its2.seqs %>% filter(sample.ID %in% genus_seqs) # ii) extract main ITS and filter
plot.seqs.subset <- plot.seqs %>% filter(seq.ID %in% splitlist.sub$seq.ID) # iii) filter the plot sequences to only include the main ITS2 seqs
its2 <- its2.names %>% filter(sample_name %in% genus_seqs) # make Y axis labels
ggplot() + theme_bw() + geom_bar(data=plot.sequences.subset, aes(fill=seq.ID, y=abundance, x=sample.ID), color="black", position = position_fill(reverse = TRUE), stat="identity") +
theme(legend.position = "bottom", axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) + scale_fill_manual(values = colour.seqs) +
geom_text(data=its2.type.genus, aes(x=sample_name, y=1.1, label=UID), angle=90)
genus = "Seriatopora"
genus_seqs <- metadata |> filter(host_genus==genus) %>% pull(sample_name) %>% as.character()
plot.sequences.genus <- seqs %>% filter(sample.ID %in% genus_seqs)
its2 <- its2.names %>% filter(sample_name %in% plot.sequences.genus$sample.ID) # make Y axis labels
ggplot() + theme_bw() + geom_bar(data=plot.sequences.genus, aes(fill=seq.ID, y=abundance, x=sample.ID), color="black", position = position_fill(reverse = TRUE), stat="identity") +
theme(legend.position = "none", axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) + scale_fill_manual(values = colour.seqs)
genus = "Seriatopora" # change genus here and run code below
plot.seqs <- seqs %>% filter(sample.ID %in% genus_seqs) # i) extract sequences and filter
its2.seqs.subset <- its2.seqs %>% filter(sample.ID %in% genus_seqs) # ii) extract main ITS and filter
plot.seqs.subset <- plot.seqs %>% filter(seq.ID %in% splitlist.sub$seq.ID) # iii) filter the plot sequences to only include the main ITS2 seqs
its2 <- its2.names %>% filter(sample_name %in% genus_seqs) # make Y axis labels
ggplot() + theme_bw() + geom_bar(data=plot.sequences.subset, aes(fill=seq.ID, y=abundance, x=sample.ID), color="black", position = position_fill(reverse = TRUE), stat="identity") +
theme(legend.position = "bottom", axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) + scale_fill_manual(values = colour.seqs) +
geom_text(data=its2.type.genus, aes(x=sample_name, y=1.1, label=UID), angle=90)
genus = "Seriatopora" # change genus here and run code below
legendposition="bottom" # none, bottom, top, left, right
levels(as.factor(plot.sequences.names$host_genus)) # check genera
plot.sequences <- read.delim("/Users/rof011/symbiodinium/20210805T112901/post_med_seqs/9_brian-full-data_20210805T112901.seqs.absolute.abund_and_meta.txt", check.names=FALSE) %>% filter(host_genus==genus) %>% select(2, 38:ncol(.)) %>% pivot_longer(-sample_name, names_to="seqtype") %>%  filter(value > 0)
splitlist.sub <- splitlist %>% filter(rownames(.) %in% plot.sequences$sample_name) %>% pivot_longer(cols = everything()) %>% na.omit() %>% unique()
plot.sequences <- plot.sequences %>% filter(seqtype %in% splitlist.sub$value)
colour.seqs.subset <- colour.seqs %>% as.data.frame() %>% rownames_to_column() %>% rename(seq=1, colorhtml=2)  %>% filter(seq %in% plot.sequences$seqtype) %>% deframe()
its2.type.names.subset <- its2.type.names %>% filter(sample_name %in% plot.sequences$sample_name) %>% arrange(UID)
create_factor <- function(x, levels = its2.type.names.subset$sample_name){factor(x, levels)}
plot.sequences <- plot.sequences %>% mutate_at("sample_name", create_factor)
ggplot() + theme_bw() + geom_bar(data=plot.sequences, aes(fill=seqtype, y=value, x=factor(sample_name)), color="black", position = position_fill(reverse = TRUE), stat="identity") +
theme(legend.position = legendposition, axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) + scale_fill_manual(values = colour.seqs.subset) +
geom_text(data=its2.type.names.subset, aes(x=sample_name, y=1.1, label=UID), angle=90)
genus = "Seriatopora" # change genus here and run code below
legendposition="bottom" # none, bottom, top, left, right
levels(as.factor(plot.sequences.names$host_genus)) # check genera
plot.sequences <- read.delim("/Users/rof011/symbiodinium/20210805T112901/post_med_seqs/9_brian-full-data_20210805T112901.seqs.absolute.abund_and_meta.txt", check.names=FALSE) %>% filter(host_genus==genus) %>% select(2, 38:ncol(.)) %>% pivot_longer(-sample_name, names_to="seqtype") %>%  filter(value > 0)
splitlist.sub <- splitlist %>% filter(rownames(.) %in% plot.sequences$sample_name) %>% pivot_longer(cols = everything()) %>% na.omit() %>% unique()
plot.sequences <- plot.sequences %>% filter(seqtype %in% splitlist.sub$value)
colour.seqs.subset <- colour.seqs %>% as.data.frame() %>% rownames_to_column() %>% rename(seq=1, colorhtml=2)  %>% filter(seq %in% plot.sequences$seqtype) %>% deframe()
its2.type.names.subset <- its2.type.names %>% filter(sample_name %in% plot.sequences$sample_name) %>% arrange(UID)
create_factor <- function(x, levels = its2.type.names.subset$sample_name){factor(x, levels)}
plot.sequences <- plot.sequences %>% mutate_at("sample_name", create_factor)
ggplot() + theme_bw() + geom_bar(data=plot.sequences, aes(fill=seqtype, y=value, x=factor(sample_name)), color="black", position = position_fill(reverse = TRUE), stat="identity") +
theme(legend.position = legendposition, axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) + scale_fill_manual(values = colour.seqs.subset) +
geom_text(data=its2.type.names.subset, aes(x=sample_name, y=1.1, label=UID), angle=90)
genus = "Seriatopora" # change genus here and run code below
plot.seqs <- seqs %>% filter(sample.ID %in% genus_seqs) # i) extract sequences and filter
its2.seqs.subset <- its2.seqs %>% filter(sample.ID %in% genus_seqs) # ii) extract main ITS and filter
plot.seqs.subset <- plot.seqs %>% filter(seq.ID %in% its2.seqs.subset$seq.ID) # iii) filter the plot sequences to only include the main ITS2 seqs
its2 <- its2.names %>% filter(sample_name %in% genus_seqs) # make Y axis labels
ggplot() + theme_bw() + geom_bar(data=plot.sequences.subset, aes(fill=seq.ID, y=abundance, x=sample.ID), color="black", position = position_fill(reverse = TRUE), stat="identity") +
theme(legend.position = "bottom", axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) + scale_fill_manual(values = colour.seqs) +
geom_text(data=its2.type.genus, aes(x=sample_name, y=1.1, label=UID), angle=90)
plot.seqs <- seqs %>% filter(sample.ID %in% genus_seqs) # i) extract sequences and filter
its2.seqs.subset <- its2.seqs %>% filter(sample.ID %in% genus_seqs) # ii) extract main ITS and filter
its2.seqs.subset
plot.seqs %>% filter(seq.ID %in% its2.seqs.subset$seq.ID)
plot.seqs.subset <- plot.seqs %>% filter(seq.ID %in% its2.seqs.subset$seq.ID) # iii) filter the plot sequences to only include the main ITS2 seqs
its2 <- its2.names %>% filter(sample_name %in% genus_seqs) # make Y axis labels
ggplot() + theme_bw() + geom_bar(data=plot.sequences.subset, aes(fill=seq.ID, y=abundance, x=sample.ID), color="black", position = position_fill(reverse = TRUE), stat="identity") +
theme(legend.position = "bottom", axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) + scale_fill_manual(values = colour.seqs) +
geom_text(data=its2.type.genus, aes(x=sample_name, y=1.1, label=UID), angle=90)
its2.seqs
its2.names
its2.seq2 <- extract_its2_profile(sym_folder) # get ITS2 profiles
its2.seq2
its2.seqs
extract_its2_profile
load_all9
load_all()
library(devtools)
load_all()
document()
check()
seqs
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
sym_folder="/Users/rof011/Symbiodinium/20210805T112901" # set the main folder for all functions (root of symportal)
its2.type.profile <- extract_its2_profile(sym_folder) # get ITS2 profiles
its2.type.names <- extract_its2_names(sym_folder) # get ITS2 profile names
samplenumber = c("581", "356", "515", "198", "366")  # change sample numbers here and run code below
colour.seqs <- extract_plot_colors(sym_folder) # get plot colors from symportal folder, no need to every subsample
plot.sequences <- extract_seqs_long(sym_folder, type="absolute", threshold = 0) %>% # get seqs in long format for plotting with stacked bars
filter(sample.ID %in% samplenumber) # extract sequences, filter to match samplenumber
its2.type.names.subset <- its2.names %>% filter(sample_name %in% plot.sequences$sample.ID) # get matching UID for the sample.ID
# plot
ggplot() + theme_bw() + geom_bar(data=plot.sequences, aes(fill=seq.ID, y=abundance, x=sample.ID), color="black", position = position_fill(reverse = TRUE), stat="identity") +
theme(legend.position = "right", axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) + scale_fill_manual(values = colour.seqs) +
geom_text(data=its2.names.subset, aes(x=sample_name, y=1.1, label=UID), angle=90)
# plot
ggplot() + theme_bw() + geom_bar(data=plot.sequences, aes(fill=seq.ID, y=abundance, x=sample.ID), color="black", position = position_fill(reverse = TRUE), stat="identity") +
theme(legend.position = "right", axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) + scale_fill_manual(values = colour.seqs) +
geom_text(data=its2.type.names.subset, aes(x=sample_name, y=1.1, label=UID), angle=90)
samplenumber = c("581", "356", "515", "198", "366")  # change sample numbers here and run code below
# i) extract sequences and filter by samplenumber
plot.sequences.samples <- extract_seqs_long(sym_folder, type="absolute", threshold = 0) %>% # get seqs in long format for plotting with stacked bars
filter(sample.ID %in% samplenumber)
# ii) filter the main seq.ID (the ones that form the ITS2 profiles) in the samplenumber
splitlist.sub <- extract_its2_profile_split_long(sym_folder) %>% filter(sample.ID %in% plot.sequences.filtered$sample.ID)
# i) extract sequences and filter by samplenumber
plot.sequences.samples <- extract_seqs_long(sym_folder, type="absolute", threshold = 0) %>% # get seqs in long format for plotting with stacked bars
filter(sample.ID %in% samplenumber)
# ii) filter the main seq.ID (the ones that form the ITS2 profiles) in the samplenumber
splitlist.sub <- extract_its2_profile_seqs(sym_folder) %>% filter(sample.ID %in% plot.sequences.filtered$sample.ID)
extract_its2_profile_seqs(sym_folder) %>% filter(sample.ID %in% plot.sequences.filtered$sample.ID)
# ii) filter the main seq.ID (the ones that form the ITS2 profiles) in the samplenumber
splitlist.sub <- extract_its2_profile_seqs(sym_folder) %>% filter(sample.ID %in% plot.sequences.samples$sample.ID)
# iii) filter the plot sequences to only include the main ITS2 seqs
plot.sequences <- plot.sequences.samples %>% # get seqs in long format for plotting with stacked bars
filter(seq.ID %in% splitlist.sub$seq.ID)
its2.type.names.subset <- its2.type.names %>% filter(sample_name %in% plot.sequences$sample.ID)
ggplot() + theme_bw() + geom_bar(data=plot.sequences, aes(fill=seq.ID, y=abundance, x=sample.ID), color="black", position = position_fill(reverse = TRUE), stat="identity") +
theme(legend.position = "bottom", axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) + scale_fill_manual(values = colour.seqs.subset) +
geom_text(data=its2.type.names.subset, aes(x=sample_name, y=1.1, label=UID), angle=90)
ggplot() + theme_bw() + geom_bar(data=plot.sequences, aes(fill=seq.ID, y=abundance, x=sample.ID), color="black", position = position_fill(reverse = TRUE), stat="identity") +
theme(legend.position = "bottom", axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) + scale_fill_manual(values = colour.seqs) +
geom_text(data=its2.type.names.subset, aes(x=sample_name, y=1.1, label=UID), angle=90)
check()
build_article("code comparison")
pkgdown::build_article("code comparison")
devtools::load_all(".")
pkgdown::build_article("code comparison")
getwd()
pkgdown::build_article("code comparison")
build_site()
plot_data <- extract_seqs_long(folder="/Users/rof011/symbiodinium/20220919T102058_esampayo", type="relative", cutoff=1000, clade="C") |>
mutate(numeric.ID = as.numeric((as.factor(seq.ID)))) |>
mutate(sample.ID = as.factor(sample.ID)) |>
#  filter(abundance>0.01) |>
complete(seq.ID, sample.ID) |>
filter(sample.ID %in% levels(sample.ID)[1:10]) |>
mutate(numeric.ID = as.numeric((as.factor(seq.ID)))) |>
replace_na(list(abundance = 0))
####
# Sample removal:
# cutoff = removes seq less than threshold
# drop_samples = by vector of sample names, e.g.c("H00B05")
# drop_samples_match = by partial sample names, e.g.c("H0")
# drop_seqs = by vector of sequence ID
#
# calculate relative abundance AFTER sample changes.
######
library(symportalfunctions)
library(tidyverse)
library(ggridges)
plot_data <- extract_seqs_long(folder="/Users/rof011/symbiodinium/20220919T102058_esampayo", type="relative", cutoff=1000, clade="C") |>
mutate(numeric.ID = as.numeric((as.factor(seq.ID)))) |>
mutate(sample.ID = as.factor(sample.ID)) |>
#  filter(abundance>0.01) |>
complete(seq.ID, sample.ID) |>
filter(sample.ID %in% levels(sample.ID)[1:10]) |>
mutate(numeric.ID = as.numeric((as.factor(seq.ID)))) |>
replace_na(list(abundance = 0))
plot_data <- extract_seqs_long(folder="/Users/rof011/symbiodinium/20220919T102058_esampayo", type="relative",  clade="C") |>
mutate(numeric.ID = as.numeric((as.factor(seq.ID)))) |>
mutate(sample.ID = as.factor(sample.ID)) |>
#  filter(abundance>0.01) |>
complete(seq.ID, sample.ID) |>
filter(sample.ID %in% levels(sample.ID)[1:10]) |>
mutate(numeric.ID = as.numeric((as.factor(seq.ID)))) |>
replace_na(list(abundance = 0))
plot_data
ggplot() + theme_ridges() + ylab("") +
geom_ridgeline(data=plot_data, aes(x = numeric.ID, y = sample.ID, height = abundance*2, fill=sample.ID), alpha=0.4, show.legend=FALSE)
plot_data <- extract_seqs_long(folder="/Users/rof011/symbiodinium/20220919T102058_esampayo", type="relative",  clade="C") |>
mutate(numeric.ID = as.numeric((as.factor(seq.ID)))) |>
mutate(sample.ID = as.factor(sample.ID)) |>
#  filter(abundance>0.01) |>
complete(seq.ID, sample.ID) |>
filter(sample.ID %in% levels(sample.ID)[1:10]) |>
mutate(numeric.ID = as.numeric((as.factor(seq.ID)))) |>
replace_na(list(abundance = 0)) |> filter(sample.ID=="H00B06ES22OT")
ggplot() + theme_ridges() + ylab("") +
geom_ridgeline(data=plot_data, aes(x = numeric.ID, y = sample.ID, height = abundance*2, fill=sample.ID), alpha=0.4, show.legend=FALSE)
plot_data
extract_seqs_long(folder="/Users/rof011/symbiodinium/20220919T102058_esampayo", type="relative",  clade="C") |>
mutate(numeric.ID = as.numeric((as.factor(seq.ID)))) |>
mutate(sample.ID = as.factor(sample.ID)) |>
#  filter(abundance>0.01) |>
complete(seq.ID, sample.ID) |>
filter(sample.ID %in% levels(sample.ID)[1:10]) |>
mutate(numeric.ID = as.numeric((as.factor(seq.ID)))) |>
replace_na(list(abundance = 0))
plot_data <- extract_seqs_long(folder="/Users/rof011/symbiodinium/20220919T102058_esampayo", type="relative",  clade="C") |>
mutate(numeric.ID = as.numeric((as.factor(seq.ID)))) |>
mutate(sample.ID = as.factor(sample.ID)) |>
#  filter(abundance>0.01) |>
complete(seq.ID, sample.ID) |>
filter(sample.ID %in% levels(sample.ID)[1:10]) |>
mutate(numeric.ID = as.numeric((as.factor(seq.ID)))) |>
replace_na(list(abundance = 0)) |> filter(sample.ID=="H00B06_ES22OT")
ggplot() + theme_ridges() + ylab("") +
geom_ridgeline(data=plot_data, aes(x = numeric.ID, y = sample.ID, height = abundance*2, fill=sample.ID), alpha=0.4, show.legend=FALSE)
plot_data
plot_data <- extract_seqs_long(folder="/Users/rof011/symbiodinium/20220919T102058_esampayo", type="relative",  clade="C") |>
mutate(numeric.ID = as.numeric((as.factor(seq.ID)))) |>
mutate(sample.ID = as.factor(sample.ID)) |>
#  filter(abundance>0.01) |>
complete(seq.ID, sample.ID) |>
filter(sample.ID %in% levels(sample.ID)[1:10]) |>
mutate(numeric.ID = as.numeric((as.factor(seq.ID)))) |>
replace_na(list(abundance = 0)) |> filter(sample.ID=="H00B06_ES22OT") %>%
sample(nrow(.))
plot_data <- extract_seqs_long(folder="/Users/rof011/symbiodinium/20220919T102058_esampayo", type="relative",  clade="C") |>
mutate(numeric.ID = as.numeric((as.factor(seq.ID)))) |>
mutate(sample.ID = as.factor(sample.ID)) |>
#  filter(abundance>0.01) |>
complete(seq.ID, sample.ID) |>
filter(sample.ID %in% levels(sample.ID)[1:10]) |>
mutate(numeric.ID = as.numeric((as.factor(seq.ID)))) |>
replace_na(list(abundance = 0)) |> filter(sample.ID=="H00B06_ES22OT") %>%
do(sample_n(., size = nrow(.)))
ggplot() + theme_ridges() + ylab("") +
geom_ridgeline(data=plot_data, aes(x = numeric.ID, y = sample.ID, height = abundance*2, fill=sample.ID), alpha=0.4, show.legend=FALSE)
plot_data <- extract_seqs_long(folder="/Users/rof011/symbiodinium/20220919T102058_esampayo", type="relative",  clade="C") |>
mutate(numeric.ID = as.numeric((as.factor(seq.ID)))) |>
mutate(sample.ID = as.factor(sample.ID)) |>
#  filter(abundance>0.01) |>
complete(seq.ID, sample.ID) |>
filter(sample.ID %in% levels(sample.ID)[1:10]) |>
mutate(numeric.ID = as.numeric((as.factor(seq.ID)))) |>
replace_na(list(abundance = 0)) |> filter(sample.ID=="H00B06_ES22OT") %>%
do(sample_n(., size = nrow(.)))
ggplot() + theme_ridges() + ylab("") +
geom_ridgeline(data=plot_data, aes(x = numeric.ID, y = sample.ID, height = abundance*2, fill=sample.ID), alpha=0.4, show.legend=FALSE)
plot_data <-  lapply(plot_data, sample)
ggplot() + theme_ridges() + ylab("") +
geom_ridgeline(data=plot_data, aes(x = numeric.ID, y = sample.ID, height = abundance*2, fill=sample.ID), alpha=0.4, show.legend=FALSE)
plot_data
plot_data <- extract_seqs_long(folder="/Users/rof011/symbiodinium/20220919T102058_esampayo", type="relative",  clade="C") |>
mutate(numeric.ID = as.numeric((as.factor(seq.ID)))) |>
mutate(sample.ID = as.factor(sample.ID)) |>
#  filter(abundance>0.01) |>
complete(seq.ID, sample.ID) |>
filter(sample.ID %in% levels(sample.ID)[1:10]) |>
mutate(numeric.ID = as.numeric((as.factor(seq.ID)))) |>
replace_na(list(abundance = 0)) |> filter(sample.ID=="H00B06_ES22OT") %>%
do(sample_n(., size = nrow(.)))
plot_data
plot_data2 <- plot_data |> sort(abundance)
ggplot() + theme_ridges() + ylab("") +
geom_ridgeline(data=plot_data2, aes(x = numeric.ID, y = sample.ID, height = abundance*2, fill=sample.ID), alpha=0.4, show.legend=FALSE)
plot_data2 <- plot_data |> sort(abundance)
plot_data2 <- plot_data |> sort(abundance)
plot_data2 <- plot_data |> arrange(abundance)
ggplot() + theme_ridges() + ylab("") +
geom_ridgeline(data=plot_data, aes(x = numeric.ID, y = sample.ID, height = abundance*2, fill=sample.ID), alpha=0.4, show.legend=FALSE)
ggplot() + theme_ridges() + ylab("") +
geom_ridgeline(data=plot_data2, aes(x = numeric.ID, y = sample.ID, height = abundance*2, fill=sample.ID), alpha=0.4, show.legend=FALSE)
plot_data <- extract_seqs_long(folder="/Users/rof011/symbiodinium/20220919T102058_esampayo", type="relative",  clade="C") |>
mutate(numeric.ID = as.numeric((as.factor(seq.ID)))) |>
mutate(sample.ID = as.factor(sample.ID)) |>
#  filter(abundance>0.01) |>
complete(seq.ID, sample.ID) |>
filter(sample.ID %in% levels(sample.ID)[1:10]) |>
mutate(numeric.ID = as.numeric((as.factor(seq.ID)))) |>
replace_na(list(abundance = 0)) |> filter(sample.ID=="H00B06_ES22OT") %>%
do(sample_n(., size = nrow(.)))
plot_data2 <- plot_data |> arrange(abundance)
ggplot() + theme_ridges() + ylab("") +
geom_ridgeline(data=plot_data, aes(x = numeric.ID, y = sample.ID, height = abundance*2, fill=sample.ID), alpha=0.4, show.legend=FALSE)
ggplot() + theme_ridges() + ylab("") +
geom_ridgeline(data=plot_data2, aes(x = numeric.ID, y = sample.ID, height = abundance*2, fill=sample.ID), alpha=0.4, show.legend=FALSE)
plot_data2
plot_data2 <- plot_data |> rev(arrange(abundance))
plot_data2 <- plot_data |> arrange(abundance)
?rev
plot_data2 <- plot_data |> arrange(desc(abundance))
plot_data2
ggplot() + theme_ridges() + ylab("") +
geom_ridgeline(data=plot_data2, aes(x = numeric.ID, y = sample.ID, height = abundance*2, fill=sample.ID), alpha=0.4, show.legend=FALSE)
plot_data2 <- sample(plot_data2$ID)
plot_data <- extract_seqs_long(folder="/Users/rof011/symbiodinium/20220919T102058_esampayo", type="relative",  clade="C") |>
mutate(numeric.ID = as.numeric((as.factor(seq.ID)))) |>
mutate(sample.ID = as.factor(sample.ID)) |>
#  filter(abundance>0.01) |>
complete(seq.ID, sample.ID) |>
filter(sample.ID %in% levels(sample.ID)[1:10]) |>
mutate(numeric.ID = as.numeric((as.factor(seq.ID)))) |>
replace_na(list(abundance = 0)) |> filter(sample.ID=="H00B06_ES22OT") %>%
do(sample_n(., size = nrow(.)))
plot_data2$seq.ID <- sample(plot_data2$seq.ID)
ggplot() + theme_ridges() + ylab("") +
geom_ridgeline(data=plot_data, aes(x = numeric.ID, y = sample.ID, height = abundance*2, fill=sample.ID), alpha=0.4, show.legend=FALSE)
ggplot() + theme_ridges() + ylab("") +
geom_ridgeline(data=plot_data2, aes(x = numeric.ID, y = sample.ID, height = abundance*2, fill=sample.ID), alpha=0.4, show.legend=FALSE)
v
$seq.ID
plot_data
plot_data2
plot_data <- extract_seqs_long(folder="/Users/rof011/symbiodinium/20220919T102058_esampayo", type="relative",  clade="C") |>
mutate(numeric.ID = as.numeric((as.factor(seq.ID)))) |>
mutate(sample.ID = as.factor(sample.ID)) |>
#  filter(abundance>0.01) |>
complete(seq.ID, sample.ID) |>
filter(sample.ID %in% levels(sample.ID)[1:10]) |>
mutate(numeric.ID = as.numeric((as.factor(seq.ID)))) |>
replace_na(list(abundance = 0)) |> filter(sample.ID=="H00B06_ES22OT") %>%
do(sample_n(., size = nrow(.)))
plot_data2 <- plot_data
plot_data2
plot_data2$seq.ID <- sample(plot_data2$seq.ID)
plot_data2
plot_data2 <- plot_data
plot_data2$seq.ID <- sample(plot_data2$seq.ID)
ggplot() + theme_ridges() + ylab("") +
geom_ridgeline(data=plot_data, aes(x = numeric.ID, y = sample.ID, height = abundance*2, fill=sample.ID), alpha=0.4, show.legend=FALSE)
ggplot() + theme_ridges() + ylab("") +
geom_ridgeline(data=plot_data2, aes(x = numeric.ID, y = sample.ID, height = abundance*2, fill=sample.ID), alpha=0.4, show.legend=FALSE)
plot_data <- extract_seqs_long(folder="/Users/rof011/symbiodinium/20220919T102058_esampayo", type="relative",  clade="C") |>
mutate(numeric.ID = as.numeric((as.factor(seq.ID)))) |>
mutate(sample.ID = as.factor(sample.ID)) |>
#  filter(abundance>0.01) |>
complete(seq.ID, sample.ID) |>
filter(sample.ID %in% levels(sample.ID)[1:10]) |>
mutate(numeric.ID = as.numeric((as.factor(seq.ID)))) |>
replace_na(list(abundance = 0)) |> filter(sample.ID=="H00B06_ES22OT") %>%
do(sample_n(., size = nrow(.)))
plot_data2 <- plot_data
plot_data2$numeric.ID <- sample(plot_data2$numeric.ID)
ggplot() + theme_ridges() + ylab("") +
geom_ridgeline(data=plot_data, aes(x = numeric.ID, y = sample.ID, height = abundance*2, fill=sample.ID), alpha=0.4, show.legend=FALSE)
ggplot() + theme_ridges() + ylab("") +
geom_ridgeline(data=plot_data2, aes(x = numeric.ID, y = sample.ID, height = abundance*2, fill=sample.ID), alpha=0.4, show.legend=FALSE)
